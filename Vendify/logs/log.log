-- VENDIFY LOGS --
2024-06-04 17:36:23.216 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:19) log ### -->Suscribe Topics<--
2024-06-04 17:36:24.703 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:24) log ### -->Running weather Thread<--
2024-06-04 17:36:30.664 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:19) log ### -->Suscribe Topics<--
2024-06-04 17:36:32.871 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:24) log ### -->Running weather Thread<--
2024-06-04 17:36:35.000 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-04 17:36:42.967 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-04 17:36:43.075 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-04 17:36:58.336 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-04 17:36:59.505 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-04 17:36:59.505 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-04 17:37:06.211 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-04 17:37:07.106 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-04 17:37:07.120 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-04 17:37:19.054 INFO  servlets.userLogin.doPost(userLogin.java:30) log ### -- User login function --
2024-06-04 17:37:20.775 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 17:37:20.775 INFO  servlets.userLogin.doPost(userLogin.java:65) log ### Usuario Davinci loggeado correctamente
2024-06-04 17:37:21.626 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-04 17:37:22.355 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 17:37:22.355 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:51) log ### JSON => {"user_id":3,"nombre":"David","apellido":"Fernandez","email":"davidfernandezsanz@gmail.com","password":"1234","telefono":"638673981","fecha_registro":"may 31, 2024","matricula":"499DB7B#64","username":"Davinci"}
2024-06-04 17:37:24.889 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-04 17:37:25.700 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-04 17:37:25.703 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-04 17:37:31.579 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:35) log ### -- Get Plazas from parking information from DB--
2024-06-04 17:37:31.859 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:50) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM plaza WHERE id_parking = 2
2024-06-04 17:37:37.124 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:35) log ### -- Get Plazas from parking information from DB--
2024-06-04 17:37:39.773 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:50) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM plaza WHERE id_parking = 4
2024-06-04 17:37:42.355 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:35) log ### -- Get Plazas from parking information from DB--
2024-06-04 17:37:46.486 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:50) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM plaza WHERE id_parking = 2
2024-06-04 17:37:48.960 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:35) log ### -- Get Plazas from parking information from DB--
2024-06-04 17:37:53.097 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-04 17:37:54.071 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:50) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM plaza WHERE id_parking = 1
2024-06-04 17:37:56.139 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 17:37:56.139 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:51) log ### JSON => {"user_id":3,"nombre":"David","apellido":"Fernandez","email":"davidfernandezsanz@gmail.com","password":"1234","telefono":"638673981","fecha_registro":"may 31, 2024","matricula":"499DB7B#64","username":"Davinci"}
2024-06-04 17:37:59.832 INFO  servlets.userLogin.doPost(userLogin.java:30) log ### -- User login function --
2024-06-04 17:38:01.627 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 17:38:01.628 INFO  servlets.userLogin.doPost(userLogin.java:65) log ### Usuario Davinci loggeado correctamente
2024-06-04 17:38:01.651 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-04 17:38:01.953 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 17:38:01.956 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:51) log ### JSON => {"user_id":3,"nombre":"David","apellido":"Fernandez","email":"davidfernandezsanz@gmail.com","password":"1234","telefono":"638673981","fecha_registro":"may 31, 2024","matricula":"499DB7B#64","username":"Davinci"}
2024-06-04 17:38:05.011 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-04 17:38:06.066 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-04 17:38:06.067 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-04 17:38:10.998 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:35) log ### -- Get Plazas from parking information from DB--
2024-06-04 17:38:11.805 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:50) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM plaza WHERE id_parking = 2
2024-06-04 17:38:43.320 INFO  logic.Logic.getUsersIDFromUsername(Logic.java:475) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT user_id FROM users WHERE username = NULL
2024-06-04 17:38:43.321 ERROR servlets.registerReserva.doPost(registerReserva.java:91) log ### Number Format Exception: {} java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
	at jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:100) ~[?:?]
	at jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:106) ~[?:?]
	at jdk.internal.util.Preconditions.checkIndex(Preconditions.java:302) ~[?:?]
	at java.util.Objects.checkIndex(Objects.java:385) ~[?:?]
	at java.util.ArrayList.get(ArrayList.java:427) ~[?:?]
	at servlets.registerReserva.doPost(registerReserva.java:41) ~[classes/:?]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[servlet-api.jar:6.0]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[servlet-api.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-websocket.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[catalina.jar:10.1.16]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:673) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[catalina.jar:10.1.16]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340) ~[catalina.jar:10.1.16]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-util.jar:10.1.16]
	at java.lang.Thread.run(Thread.java:1623) ~[?:?]

2024-06-04 17:38:45.050 INFO  logic.Logic.getUsersIDFromUsername(Logic.java:475) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT user_id FROM users WHERE username = NULL
2024-06-04 17:38:45.050 ERROR servlets.registerReserva.doPost(registerReserva.java:91) log ### Number Format Exception: {} java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
	at jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:100) ~[?:?]
	at jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:106) ~[?:?]
	at jdk.internal.util.Preconditions.checkIndex(Preconditions.java:302) ~[?:?]
	at java.util.Objects.checkIndex(Objects.java:385) ~[?:?]
	at java.util.ArrayList.get(ArrayList.java:427) ~[?:?]
	at servlets.registerReserva.doPost(registerReserva.java:41) ~[classes/:?]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[servlet-api.jar:6.0]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[servlet-api.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-websocket.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[catalina.jar:10.1.16]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:673) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[catalina.jar:10.1.16]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340) ~[catalina.jar:10.1.16]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-util.jar:10.1.16]
	at java.lang.Thread.run(Thread.java:1623) ~[?:?]

2024-06-04 17:46:03.059 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-04 17:46:07.589 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-04 17:46:07.589 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-04 17:46:23.741 INFO  servlets.adminLogin.doPost(adminLogin.java:35) log ### --Admin login function --
2024-06-04 17:46:26.557 INFO  logic.Logic.getAdminFromDB(Logic.java:85) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM admin
2024-06-04 17:46:26.561 INFO  servlets.adminLogin.doPost(adminLogin.java:53) log ### Administrador loggeado correctamente admin
2024-06-04 17:46:29.375 INFO  servlets.getUsers.doGet(getUsers.java:30) log ### -- Get Users information from DB--
2024-06-04 17:46:30.820 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 17:46:30.820 INFO  servlets.getUsers.doGet(getUsers.java:36) log ### JSON Values=> [{"user_id":3,"nombre":"David","apellido":"Fernandez","email":"davidfernandezsanz@gmail.com","password":"1234","telefono":"638673981","fecha_registro":"may 31, 2024","matricula":"499DB7B#64","username":"Davinci"},{"user_id":6,"nombre":"David","apellido":"Rodríguez","email":"info893@test.gov","password":"r2QM9\u003cqxg+A_","telefono":"629721940","fecha_registro":"may 31, 2024","matricula":"470#1DB949","username":"SadBear800"}] 
2024-06-04 17:46:35.752 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-04 17:46:37.056 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-04 17:46:37.065 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-04 17:46:52.689 INFO  servlets.generatePlazas.doPost(generatePlazas.java:30) log ### --Generate Random Plaza--
2024-06-04 17:46:52.689 ERROR servlets.generatePlazas.doPost(generatePlazas.java:64) log ### Número inválido: Cannot parse null string
2024-06-04 17:47:09.086 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-04 17:47:10.045 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-04 17:47:10.046 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-04 17:47:16.065 INFO  servlets.generatePlazas.doPost(generatePlazas.java:30) log ### --Generate Random Plaza--
2024-06-04 17:47:16.065 ERROR servlets.generatePlazas.doPost(generatePlazas.java:64) log ### Número inválido: Cannot parse null string
2024-06-04 17:55:06.422 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:19) log ### -->Suscribe Topics<--
2024-06-04 17:55:07.875 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:24) log ### -->Running weather Thread<--
2024-06-04 17:55:08.616 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-04 17:55:15.574 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-04 17:55:15.657 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-04 17:55:19.659 INFO  servlets.adminLogin.doPost(adminLogin.java:35) log ### --Admin login function --
2024-06-04 17:55:23.070 INFO  logic.Logic.getAdminFromDB(Logic.java:85) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM admin
2024-06-04 17:55:23.074 ERROR servlets.adminLogin.doPost(adminLogin.java:66) log ### No se ha podido iniciar sesión
2024-06-04 17:55:29.495 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-04 17:55:30.204 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-04 17:55:30.204 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-04 17:55:41.904 INFO  servlets.adminLogin.doPost(adminLogin.java:35) log ### --Admin login function --
2024-06-04 17:55:45.419 INFO  logic.Logic.getAdminFromDB(Logic.java:85) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM admin
2024-06-04 17:55:45.421 INFO  servlets.adminLogin.doPost(adminLogin.java:53) log ### Administrador loggeado correctamente admin
2024-06-04 17:55:47.093 INFO  servlets.getUsers.doGet(getUsers.java:30) log ### -- Get Users information from DB--
2024-06-04 17:55:47.941 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 17:55:47.948 INFO  servlets.getUsers.doGet(getUsers.java:36) log ### JSON Values=> [{"user_id":3,"nombre":"David","apellido":"Fernandez","email":"davidfernandezsanz@gmail.com","password":"1234","telefono":"638673981","fecha_registro":"may 31, 2024","matricula":"499DB7B#64","username":"Davinci"},{"user_id":6,"nombre":"David","apellido":"Rodríguez","email":"info893@test.gov","password":"r2QM9\u003cqxg+A_","telefono":"629721940","fecha_registro":"may 31, 2024","matricula":"470#1DB949","username":"SadBear800"}] 
2024-06-04 17:55:50.054 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-04 17:55:50.354 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-04 17:55:50.356 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-04 17:55:53.706 INFO  servlets.generatePlazas.doPost(generatePlazas.java:33) log ### --Generate Random Plaza--
2024-06-04 17:55:53.707 ERROR servlets.generatePlazas.doPost(generatePlazas.java:69) log ### Número inválido: Cannot parse null string
2024-06-04 17:58:20.755 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:19) log ### -->Suscribe Topics<--
2024-06-04 17:58:25.021 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:24) log ### -->Running weather Thread<--
2024-06-04 17:58:25.499 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-04 17:58:29.586 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-04 17:58:29.657 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-04 17:58:31.243 INFO  servlets.adminLogin.doPost(adminLogin.java:35) log ### --Admin login function --
2024-06-04 17:58:31.518 INFO  logic.Logic.getAdminFromDB(Logic.java:85) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM admin
2024-06-04 17:58:31.533 ERROR servlets.adminLogin.doPost(adminLogin.java:66) log ### No se ha podido iniciar sesión
2024-06-04 17:58:41.332 INFO  servlets.generatePlazas.doPost(generatePlazas.java:33) log ### --Generate Random Plaza--
2024-06-04 17:58:41.332 ERROR servlets.generatePlazas.doPost(generatePlazas.java:69) log ### Número inválido: Cannot parse null string
2024-06-04 17:58:56.468 INFO  servlets.adminLogin.doPost(adminLogin.java:35) log ### --Admin login function --
2024-06-04 17:58:58.703 INFO  logic.Logic.getAdminFromDB(Logic.java:85) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM admin
2024-06-04 17:58:58.704 INFO  servlets.adminLogin.doPost(adminLogin.java:53) log ### Administrador loggeado correctamente admin
2024-06-04 17:58:58.870 INFO  servlets.getUsers.doGet(getUsers.java:30) log ### -- Get Users information from DB--
2024-06-04 17:59:00.154 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 17:59:00.163 INFO  servlets.getUsers.doGet(getUsers.java:36) log ### JSON Values=> [{"user_id":3,"nombre":"David","apellido":"Fernandez","email":"davidfernandezsanz@gmail.com","password":"1234","telefono":"638673981","fecha_registro":"may 31, 2024","matricula":"499DB7B#64","username":"Davinci"},{"user_id":6,"nombre":"David","apellido":"Rodríguez","email":"info893@test.gov","password":"r2QM9\u003cqxg+A_","telefono":"629721940","fecha_registro":"may 31, 2024","matricula":"470#1DB949","username":"SadBear800"}] 
2024-06-04 17:59:00.733 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-04 17:59:01.484 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-04 17:59:01.484 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-04 17:59:05.072 INFO  servlets.generatePlazas.doPost(generatePlazas.java:33) log ### --Generate Random Plaza--
2024-06-04 17:59:05.072 ERROR servlets.generatePlazas.doPost(generatePlazas.java:69) log ### Número inválido: Cannot parse null string
2024-06-04 18:03:33.702 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-04 18:03:34.690 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-04 18:03:34.703 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-04 18:03:45.068 INFO  servlets.adminLogin.doPost(adminLogin.java:35) log ### --Admin login function --
2024-06-04 18:03:47.994 INFO  logic.Logic.getAdminFromDB(Logic.java:85) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM admin
2024-06-04 18:03:47.994 INFO  servlets.adminLogin.doPost(adminLogin.java:53) log ### Administrador loggeado correctamente admin
2024-06-04 18:03:48.809 INFO  servlets.getUsers.doGet(getUsers.java:30) log ### -- Get Users information from DB--
2024-06-04 18:03:49.123 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 18:03:49.123 INFO  servlets.getUsers.doGet(getUsers.java:36) log ### JSON Values=> [{"user_id":3,"nombre":"David","apellido":"Fernandez","email":"davidfernandezsanz@gmail.com","password":"1234","telefono":"638673981","fecha_registro":"may 31, 2024","matricula":"499DB7B#64","username":"Davinci"},{"user_id":6,"nombre":"David","apellido":"Rodríguez","email":"info893@test.gov","password":"r2QM9\u003cqxg+A_","telefono":"629721940","fecha_registro":"may 31, 2024","matricula":"470#1DB949","username":"SadBear800"}] 
2024-06-04 18:03:49.981 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-04 18:03:50.542 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-04 18:03:50.542 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-04 18:03:57.144 INFO  servlets.generatePlazas.doPost(generatePlazas.java:33) log ### --Generate Random Plaza--
2024-06-04 18:03:57.144 ERROR servlets.generatePlazas.doPost(generatePlazas.java:69) log ### Número inválido: Cannot parse null string
2024-06-04 18:11:10.362 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-04 18:11:10.646 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-04 18:11:10.646 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-04 18:11:20.198 INFO  servlets.adminLogin.doPost(adminLogin.java:35) log ### --Admin login function --
2024-06-04 18:11:21.864 INFO  logic.Logic.getAdminFromDB(Logic.java:85) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM admin
2024-06-04 18:11:21.865 INFO  servlets.adminLogin.doPost(adminLogin.java:53) log ### Administrador loggeado correctamente admin
2024-06-04 18:11:22.813 INFO  servlets.getUsers.doGet(getUsers.java:30) log ### -- Get Users information from DB--
2024-06-04 18:11:23.426 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 18:11:23.427 INFO  servlets.getUsers.doGet(getUsers.java:36) log ### JSON Values=> [{"user_id":3,"nombre":"David","apellido":"Fernandez","email":"davidfernandezsanz@gmail.com","password":"1234","telefono":"638673981","fecha_registro":"may 31, 2024","matricula":"499DB7B#64","username":"Davinci"},{"user_id":6,"nombre":"David","apellido":"Rodríguez","email":"info893@test.gov","password":"r2QM9\u003cqxg+A_","telefono":"629721940","fecha_registro":"may 31, 2024","matricula":"470#1DB949","username":"SadBear800"}] 
2024-06-04 18:11:25.097 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-04 18:11:25.860 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-04 18:11:25.860 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-04 18:11:30.374 INFO  servlets.generatePlazas.doPost(generatePlazas.java:33) log ### --Generate Random Plaza--
2024-06-04 18:11:30.374 ERROR servlets.generatePlazas.doPost(generatePlazas.java:69) log ### Número inválido: Cannot parse null string
2024-06-04 19:01:34.517 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-04 19:01:34.884 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-04 19:01:34.892 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-04 19:01:43.897 INFO  servlets.adminLogin.doPost(adminLogin.java:35) log ### --Admin login function --
2024-06-04 19:01:46.773 INFO  logic.Logic.getAdminFromDB(Logic.java:85) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM admin
2024-06-04 19:01:46.774 INFO  servlets.adminLogin.doPost(adminLogin.java:53) log ### Administrador loggeado correctamente admin
2024-06-04 19:01:48.601 INFO  servlets.getUsers.doGet(getUsers.java:30) log ### -- Get Users information from DB--
2024-06-04 19:01:49.103 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 19:01:49.110 INFO  servlets.getUsers.doGet(getUsers.java:36) log ### JSON Values=> [{"user_id":3,"nombre":"David","apellido":"Fernandez","email":"davidfernandezsanz@gmail.com","password":"1234","telefono":"638673981","fecha_registro":"may 31, 2024","matricula":"499DB7B#64","username":"Davinci"},{"user_id":6,"nombre":"David","apellido":"Rodríguez","email":"info893@test.gov","password":"r2QM9\u003cqxg+A_","telefono":"629721940","fecha_registro":"may 31, 2024","matricula":"470#1DB949","username":"SadBear800"}] 
2024-06-04 19:01:51.213 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-04 19:01:51.969 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-04 19:01:51.971 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-04 19:01:58.730 INFO  servlets.generatePlazas.doPost(generatePlazas.java:33) log ### --Generate Random Plaza--
2024-06-04 19:01:58.731 ERROR servlets.generatePlazas.doPost(generatePlazas.java:69) log ### Número inválido: Cannot parse null string
2024-06-04 19:14:38.455 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:19) log ### -->Suscribe Topics<--
2024-06-04 19:14:39.892 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:24) log ### -->Running weather Thread<--
2024-06-04 19:14:40.658 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-04 19:14:43.717 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-04 19:14:43.789 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-04 19:14:48.364 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-04 19:14:48.793 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-04 19:14:48.794 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-04 19:14:59.298 INFO  servlets.adminLogin.doPost(adminLogin.java:35) log ### --Admin login function --
2024-06-04 19:15:01.058 INFO  logic.Logic.getAdminFromDB(Logic.java:85) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM admin
2024-06-04 19:15:01.064 INFO  servlets.adminLogin.doPost(adminLogin.java:53) log ### Administrador loggeado correctamente admin
2024-06-04 19:15:01.717 INFO  servlets.getUsers.doGet(getUsers.java:30) log ### -- Get Users information from DB--
2024-06-04 19:15:02.012 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 19:15:02.019 INFO  servlets.getUsers.doGet(getUsers.java:36) log ### JSON Values=> [{"user_id":3,"nombre":"David","apellido":"Fernandez","email":"davidfernandezsanz@gmail.com","password":"1234","telefono":"638673981","fecha_registro":"may 31, 2024","matricula":"499DB7B#64","username":"Davinci"},{"user_id":6,"nombre":"David","apellido":"Rodríguez","email":"info893@test.gov","password":"r2QM9\u003cqxg+A_","telefono":"629721940","fecha_registro":"may 31, 2024","matricula":"470#1DB949","username":"SadBear800"}] 
2024-06-04 19:15:08.765 INFO  servlets.generateReserva.doPost(generateReserva.java:36) log ### --Generate Random Reserva--
2024-06-04 19:15:09.197 INFO  logic.Logic.getUsersID(Logic.java:448) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT user_id FROM users
2024-06-04 19:15:10.714 INFO  logic.Logic.getParkingsID(Logic.java:501) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT parking_id FROM parkings
2024-06-04 19:15:12.297 ERROR logic.Logic.getPlazaIDFromParking(Logic.java:534) log ### Error: {} java.sql.SQLException: No value specified for parameter 1
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:989) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at org.apache.tomcat.dbcp.dbcp2.DelegatingPreparedStatement.executeQuery(DelegatingPreparedStatement.java:123) ~[tomcat-dbcp.jar:10.1.16]
	at org.apache.tomcat.dbcp.dbcp2.DelegatingPreparedStatement.executeQuery(DelegatingPreparedStatement.java:123) ~[tomcat-dbcp.jar:10.1.16]
	at logic.Logic.getPlazaIDFromParking(Logic.java:526) ~[classes/:?]
	at servlets.generateReserva.doPost(generateReserva.java:51) ~[classes/:?]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[servlet-api.jar:6.0]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[servlet-api.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-websocket.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[catalina.jar:10.1.16]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:673) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[catalina.jar:10.1.16]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340) ~[catalina.jar:10.1.16]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-util.jar:10.1.16]
	at java.lang.Thread.run(Thread.java:1623) ~[?:?]

2024-06-04 19:15:12.297 ERROR servlets.generateReserva.doPost(generateReserva.java:96) log ### Number Format Exception: {} java.lang.IllegalArgumentException: bound must be positive
	at java.util.Random.nextInt(Random.java:557) ~[?:?]
	at servlets.generateReserva.doPost(generateReserva.java:55) ~[classes/:?]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[servlet-api.jar:6.0]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[servlet-api.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-websocket.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[catalina.jar:10.1.16]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:673) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[catalina.jar:10.1.16]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340) ~[catalina.jar:10.1.16]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-util.jar:10.1.16]
	at java.lang.Thread.run(Thread.java:1623) ~[?:?]

2024-06-04 19:18:24.576 INFO  servlets.generateReserva.doPost(generateReserva.java:36) log ### --Generate Random Reserva--
2024-06-04 19:18:26.207 INFO  logic.Logic.getUsersID(Logic.java:448) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT user_id FROM users
2024-06-04 19:18:27.690 INFO  logic.Logic.getParkingsID(Logic.java:501) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT parking_id FROM parkings
2024-06-04 19:18:31.777 ERROR logic.Logic.getPlazaIDFromParking(Logic.java:534) log ### Error: {} java.sql.SQLException: No value specified for parameter 1
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:989) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at org.apache.tomcat.dbcp.dbcp2.DelegatingPreparedStatement.executeQuery(DelegatingPreparedStatement.java:123) ~[tomcat-dbcp.jar:10.1.16]
	at org.apache.tomcat.dbcp.dbcp2.DelegatingPreparedStatement.executeQuery(DelegatingPreparedStatement.java:123) ~[tomcat-dbcp.jar:10.1.16]
	at logic.Logic.getPlazaIDFromParking(Logic.java:526) ~[classes/:?]
	at servlets.generateReserva.doPost(generateReserva.java:51) ~[classes/:?]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[servlet-api.jar:6.0]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[servlet-api.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-websocket.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[catalina.jar:10.1.16]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:673) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[catalina.jar:10.1.16]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340) ~[catalina.jar:10.1.16]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-util.jar:10.1.16]
	at java.lang.Thread.run(Thread.java:1623) ~[?:?]

2024-06-04 19:18:31.777 ERROR servlets.generateReserva.doPost(generateReserva.java:96) log ### Number Format Exception: {} java.lang.IllegalArgumentException: bound must be positive
	at java.util.Random.nextInt(Random.java:557) ~[?:?]
	at servlets.generateReserva.doPost(generateReserva.java:55) ~[classes/:?]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[servlet-api.jar:6.0]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[servlet-api.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-websocket.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[catalina.jar:10.1.16]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:673) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[catalina.jar:10.1.16]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340) ~[catalina.jar:10.1.16]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-util.jar:10.1.16]
	at java.lang.Thread.run(Thread.java:1623) ~[?:?]

2024-06-04 19:19:39.164 INFO  servlets.generateReserva.doPost(generateReserva.java:36) log ### --Generate Random Reserva--
2024-06-04 19:19:40.284 INFO  logic.Logic.getUsersID(Logic.java:448) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT user_id FROM users
2024-06-04 19:19:42.259 INFO  logic.Logic.getParkingsID(Logic.java:501) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT parking_id FROM parkings
2024-06-04 19:19:43.521 ERROR logic.Logic.getPlazaIDFromParking(Logic.java:534) log ### Error: {} java.sql.SQLException: No value specified for parameter 1
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:989) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at org.apache.tomcat.dbcp.dbcp2.DelegatingPreparedStatement.executeQuery(DelegatingPreparedStatement.java:123) ~[tomcat-dbcp.jar:10.1.16]
	at org.apache.tomcat.dbcp.dbcp2.DelegatingPreparedStatement.executeQuery(DelegatingPreparedStatement.java:123) ~[tomcat-dbcp.jar:10.1.16]
	at logic.Logic.getPlazaIDFromParking(Logic.java:526) ~[classes/:?]
	at servlets.generateReserva.doPost(generateReserva.java:51) ~[classes/:?]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[servlet-api.jar:6.0]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[servlet-api.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-websocket.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[catalina.jar:10.1.16]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:673) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[catalina.jar:10.1.16]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340) ~[catalina.jar:10.1.16]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-util.jar:10.1.16]
	at java.lang.Thread.run(Thread.java:1623) ~[?:?]

2024-06-04 19:19:43.521 ERROR servlets.generateReserva.doPost(generateReserva.java:96) log ### Number Format Exception: {} java.lang.IllegalArgumentException: bound must be positive
	at java.util.Random.nextInt(Random.java:557) ~[?:?]
	at servlets.generateReserva.doPost(generateReserva.java:55) ~[classes/:?]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[servlet-api.jar:6.0]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[servlet-api.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-websocket.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[catalina.jar:10.1.16]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:673) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[catalina.jar:10.1.16]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340) ~[catalina.jar:10.1.16]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-util.jar:10.1.16]
	at java.lang.Thread.run(Thread.java:1623) ~[?:?]

2024-06-04 19:20:32.546 INFO  servlets.generateReserva.doPost(generateReserva.java:36) log ### --Generate Random Reserva--
2024-06-04 19:20:34.456 INFO  logic.Logic.getUsersID(Logic.java:448) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT user_id FROM users
2024-06-04 19:20:37.022 INFO  logic.Logic.getParkingsID(Logic.java:501) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT parking_id FROM parkings
2024-06-04 19:20:39.889 ERROR logic.Logic.getPlazaIDFromParking(Logic.java:534) log ### Error: {} java.sql.SQLException: No value specified for parameter 1
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:989) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at org.apache.tomcat.dbcp.dbcp2.DelegatingPreparedStatement.executeQuery(DelegatingPreparedStatement.java:123) ~[tomcat-dbcp.jar:10.1.16]
	at org.apache.tomcat.dbcp.dbcp2.DelegatingPreparedStatement.executeQuery(DelegatingPreparedStatement.java:123) ~[tomcat-dbcp.jar:10.1.16]
	at logic.Logic.getPlazaIDFromParking(Logic.java:526) ~[classes/:?]
	at servlets.generateReserva.doPost(generateReserva.java:51) ~[classes/:?]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[servlet-api.jar:6.0]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[servlet-api.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-websocket.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[catalina.jar:10.1.16]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:673) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[catalina.jar:10.1.16]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340) ~[catalina.jar:10.1.16]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-util.jar:10.1.16]
	at java.lang.Thread.run(Thread.java:1623) ~[?:?]

2024-06-04 19:20:39.889 ERROR servlets.generateReserva.doPost(generateReserva.java:96) log ### Number Format Exception: {} java.lang.IllegalArgumentException: bound must be positive
	at java.util.Random.nextInt(Random.java:557) ~[?:?]
	at servlets.generateReserva.doPost(generateReserva.java:55) ~[classes/:?]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[servlet-api.jar:6.0]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[servlet-api.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-websocket.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[catalina.jar:10.1.16]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:673) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[catalina.jar:10.1.16]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340) ~[catalina.jar:10.1.16]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-util.jar:10.1.16]
	at java.lang.Thread.run(Thread.java:1623) ~[?:?]

2024-06-04 19:21:32.551 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:19) log ### -->Suscribe Topics<--
2024-06-04 19:21:33.873 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:24) log ### -->Running weather Thread<--
2024-06-04 19:21:34.337 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-04 19:21:37.882 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-04 19:21:37.937 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-04 19:21:38.005 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-04 19:21:39.452 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-04 19:21:39.452 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-04 19:21:46.715 INFO  servlets.adminLogin.doPost(adminLogin.java:35) log ### --Admin login function --
2024-06-04 19:21:47.802 INFO  logic.Logic.getAdminFromDB(Logic.java:85) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM admin
2024-06-04 19:21:47.817 INFO  servlets.adminLogin.doPost(adminLogin.java:53) log ### Administrador loggeado correctamente admin
2024-06-04 19:21:48.324 INFO  servlets.getUsers.doGet(getUsers.java:30) log ### -- Get Users information from DB--
2024-06-04 19:21:49.169 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 19:21:49.183 INFO  servlets.getUsers.doGet(getUsers.java:36) log ### JSON Values=> [{"user_id":3,"nombre":"David","apellido":"Fernandez","email":"davidfernandezsanz@gmail.com","password":"1234","telefono":"638673981","fecha_registro":"may 31, 2024","matricula":"499DB7B#64","username":"Davinci"},{"user_id":6,"nombre":"David","apellido":"Rodríguez","email":"info893@test.gov","password":"r2QM9\u003cqxg+A_","telefono":"629721940","fecha_registro":"may 31, 2024","matricula":"470#1DB949","username":"SadBear800"}] 
2024-06-04 19:21:55.877 INFO  servlets.generateReserva.doPost(generateReserva.java:35) log ### --Generate Random Reserva--
2024-06-04 19:21:56.519 INFO  logic.Logic.getUsersID(Logic.java:448) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT user_id FROM users
2024-06-04 19:21:58.666 INFO  logic.Logic.getParkingsID(Logic.java:501) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT parking_id FROM parkings
2024-06-04 19:22:02.702 INFO  logic.Logic.getPlazaID(Logic.java:526) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT id_plaza FROM plaza
2024-06-04 19:22:04.634 INFO  servlets.generateReserva.doPost(generateReserva.java:61) log ### Query => com.mysql.cj.jdbc.ClientPreparedStatement: INSERT INTO reservas(user_id, parking_id, fecha_reserva, hora_inicio, hora_fin, id_plaza) VALUES (** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **)
2024-06-04 19:22:05.117 INFO  servlets.generateReserva.doPost(generateReserva.java:73) log ### Reserva registrada con exito!
2024-06-04 19:24:10.563 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:19) log ### -->Suscribe Topics<--
2024-06-04 19:24:12.423 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:24) log ### -->Running weather Thread<--
2024-06-04 19:24:12.833 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-04 19:24:16.940 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-04 19:24:17.008 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-04 19:24:21.596 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-04 19:24:22.363 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-04 19:24:22.364 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-04 19:24:32.132 INFO  servlets.adminLogin.doPost(adminLogin.java:35) log ### --Admin login function --
2024-06-04 19:24:34.548 INFO  logic.Logic.getAdminFromDB(Logic.java:85) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM admin
2024-06-04 19:24:34.548 INFO  servlets.adminLogin.doPost(adminLogin.java:53) log ### Administrador loggeado correctamente admin
2024-06-04 19:24:37.492 INFO  servlets.getUsers.doGet(getUsers.java:30) log ### -- Get Users information from DB--
2024-06-04 19:24:38.362 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 19:24:38.366 INFO  servlets.getUsers.doGet(getUsers.java:36) log ### JSON Values=> [{"user_id":3,"nombre":"David","apellido":"Fernandez","email":"davidfernandezsanz@gmail.com","password":"1234","telefono":"638673981","fecha_registro":"may 31, 2024","matricula":"499DB7B#64","username":"Davinci"},{"user_id":6,"nombre":"David","apellido":"Rodríguez","email":"info893@test.gov","password":"r2QM9\u003cqxg+A_","telefono":"629721940","fecha_registro":"may 31, 2024","matricula":"470#1DB949","username":"SadBear800"}] 
2024-06-04 19:24:42.074 INFO  servlets.generateReserva.doPost(generateReserva.java:35) log ### --Generate Random Reserva--
2024-06-04 19:24:42.530 INFO  logic.Logic.getUsersID(Logic.java:448) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT user_id FROM users
2024-06-04 19:24:44.430 INFO  logic.Logic.getParkingsID(Logic.java:501) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT parking_id FROM parkings
2024-06-04 19:24:46.380 INFO  logic.Logic.getPlazaIDFromParking(Logic.java:554) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT id_plaza FROM plaza WHERE id_parking= 1 AND ocupado = 0 
2024-06-04 19:24:47.695 INFO  servlets.generateReserva.doPost(generateReserva.java:61) log ### Query => com.mysql.cj.jdbc.ClientPreparedStatement: INSERT INTO reservas(user_id, parking_id, fecha_reserva, hora_inicio, hora_fin, id_plaza) VALUES (** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **)
2024-06-04 19:24:47.881 INFO  servlets.generateReserva.doPost(generateReserva.java:73) log ### Reserva registrada con exito!
2024-06-04 19:39:48.371 INFO  servlets.getUsers.doGet(getUsers.java:30) log ### -- Get Users information from DB--
2024-06-04 19:39:49.193 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 19:39:49.207 INFO  servlets.getUsers.doGet(getUsers.java:36) log ### JSON Values=> [{"user_id":3,"nombre":"David","apellido":"Fernandez","email":"davidfernandezsanz@gmail.com","password":"1234","telefono":"638673981","fecha_registro":"may 31, 2024","matricula":"499DB7B#64","username":"Davinci"},{"user_id":6,"nombre":"David","apellido":"Rodríguez","email":"info893@test.gov","password":"r2QM9\u003cqxg+A_","telefono":"629721940","fecha_registro":"may 31, 2024","matricula":"470#1DB949","username":"SadBear800"}] 
2024-06-04 19:39:50.562 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-04 19:39:51.458 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-04 19:39:51.458 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-04 19:39:57.221 INFO  servlets.userLogin.doPost(userLogin.java:30) log ### -- User login function --
2024-06-04 19:40:00.005 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 19:40:00.005 INFO  servlets.userLogin.doPost(userLogin.java:65) log ### Usuario Davinci loggeado correctamente
2024-06-04 19:40:00.738 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-04 19:40:01.502 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 19:40:01.518 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:51) log ### JSON => {"user_id":3,"nombre":"David","apellido":"Fernandez","email":"davidfernandezsanz@gmail.com","password":"1234","telefono":"638673981","fecha_registro":"may 31, 2024","matricula":"499DB7B#64","username":"Davinci"}
2024-06-04 19:40:03.820 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-04 19:40:04.484 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-04 19:40:04.484 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-04 19:40:05.842 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:35) log ### -- Get Plazas from parking information from DB--
2024-06-04 19:40:06.919 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:50) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM plaza WHERE id_parking = 2
2024-06-04 19:40:27.801 INFO  logic.Logic.getUsersIDFromUsername(Logic.java:475) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT user_id FROM users WHERE username = NULL
2024-06-04 19:40:27.803 ERROR servlets.registerReserva.doPost(registerReserva.java:91) log ### Number Format Exception: {} java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
	at jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:100) ~[?:?]
	at jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:106) ~[?:?]
	at jdk.internal.util.Preconditions.checkIndex(Preconditions.java:302) ~[?:?]
	at java.util.Objects.checkIndex(Objects.java:385) ~[?:?]
	at java.util.ArrayList.get(ArrayList.java:427) ~[?:?]
	at servlets.registerReserva.doPost(registerReserva.java:41) ~[classes/:?]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[servlet-api.jar:6.0]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[servlet-api.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-websocket.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[catalina.jar:10.1.16]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:673) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[catalina.jar:10.1.16]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340) ~[catalina.jar:10.1.16]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-util.jar:10.1.16]
	at java.lang.Thread.run(Thread.java:1623) ~[?:?]

2024-06-04 19:46:53.070 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-04 19:46:53.740 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-04 19:46:55.472 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 19:46:55.476 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:51) log ### JSON => {"user_id":3,"nombre":"David","apellido":"Fernandez","email":"davidfernandezsanz@gmail.com","password":"1234","telefono":"638673981","fecha_registro":"may 31, 2024","matricula":"499DB7B#64","username":"Davinci"}
2024-06-04 19:46:55.964 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-04 19:46:55.964 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-04 19:47:05.060 INFO  servlets.adminLogin.doPost(adminLogin.java:35) log ### --Admin login function --
2024-06-04 19:47:05.389 INFO  logic.Logic.getAdminFromDB(Logic.java:85) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM admin
2024-06-04 19:47:05.389 INFO  servlets.adminLogin.doPost(adminLogin.java:53) log ### Administrador loggeado correctamente admin
2024-06-04 19:47:05.433 INFO  servlets.getUsers.doGet(getUsers.java:30) log ### -- Get Users information from DB--
2024-06-04 19:47:05.783 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 19:47:05.783 INFO  servlets.getUsers.doGet(getUsers.java:36) log ### JSON Values=> [{"user_id":3,"nombre":"David","apellido":"Fernandez","email":"davidfernandezsanz@gmail.com","password":"1234","telefono":"638673981","fecha_registro":"may 31, 2024","matricula":"499DB7B#64","username":"Davinci"},{"user_id":6,"nombre":"David","apellido":"Rodríguez","email":"info893@test.gov","password":"r2QM9\u003cqxg+A_","telefono":"629721940","fecha_registro":"may 31, 2024","matricula":"470#1DB949","username":"SadBear800"}] 
2024-06-04 19:47:15.894 INFO  servlets.deleteUser.doDelete(deleteUser.java:32) log ### --Delete User from DB --
2024-06-04 19:47:16.771 INFO  servlets.deleteUser.doDelete(deleteUser.java:41) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: DELETE FROM users WHERE user_id = 3
2024-06-04 19:47:17.087 ERROR servlets.deleteUser.doDelete(deleteUser.java:58) log ### Number Format Exception: {} java.sql.SQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`parking`.`reservas`, CONSTRAINT `user_id_fk` FOREIGN KEY (`user_id`) REFERENCES `users` (`user_id`))
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:118) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1061) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1009) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeLargeUpdate(ClientPreparedStatement.java:1320) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdate(ClientPreparedStatement.java:994) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at org.apache.tomcat.dbcp.dbcp2.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:137) ~[tomcat-dbcp.jar:10.1.16]
	at org.apache.tomcat.dbcp.dbcp2.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:137) ~[tomcat-dbcp.jar:10.1.16]
	at servlets.deleteUser.doDelete(deleteUser.java:43) ~[classes/:?]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:596) ~[servlet-api.jar:6.0]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[servlet-api.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-websocket.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[catalina.jar:10.1.16]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:673) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[catalina.jar:10.1.16]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340) ~[catalina.jar:10.1.16]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-util.jar:10.1.16]
	at java.lang.Thread.run(Thread.java:1623) ~[?:?]

2024-06-04 19:47:29.025 INFO  servlets.deleteUser.doDelete(deleteUser.java:32) log ### --Delete User from DB --
2024-06-04 19:47:30.506 INFO  servlets.deleteUser.doDelete(deleteUser.java:41) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: DELETE FROM users WHERE user_id = 6
2024-06-04 19:47:30.761 ERROR servlets.deleteUser.doDelete(deleteUser.java:58) log ### Number Format Exception: {} java.sql.SQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`parking`.`reservas`, CONSTRAINT `user_id_fk` FOREIGN KEY (`user_id`) REFERENCES `users` (`user_id`))
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:118) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1061) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1009) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeLargeUpdate(ClientPreparedStatement.java:1320) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdate(ClientPreparedStatement.java:994) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at org.apache.tomcat.dbcp.dbcp2.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:137) ~[tomcat-dbcp.jar:10.1.16]
	at org.apache.tomcat.dbcp.dbcp2.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:137) ~[tomcat-dbcp.jar:10.1.16]
	at servlets.deleteUser.doDelete(deleteUser.java:43) ~[classes/:?]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:596) ~[servlet-api.jar:6.0]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[servlet-api.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-websocket.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[catalina.jar:10.1.16]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:673) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[catalina.jar:10.1.16]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340) ~[catalina.jar:10.1.16]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-util.jar:10.1.16]
	at java.lang.Thread.run(Thread.java:1623) ~[?:?]

2024-06-04 19:51:11.421 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-04 19:51:13.814 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-04 19:51:13.817 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-04 19:51:21.214 INFO  servlets.adminLogin.doPost(adminLogin.java:35) log ### --Admin login function --
2024-06-04 19:51:24.821 INFO  logic.Logic.getAdminFromDB(Logic.java:85) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM admin
2024-06-04 19:51:24.822 INFO  servlets.adminLogin.doPost(adminLogin.java:53) log ### Administrador loggeado correctamente admin
2024-06-04 19:51:26.883 INFO  servlets.getUsers.doGet(getUsers.java:30) log ### -- Get Users information from DB--
2024-06-04 19:51:27.630 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 19:51:27.633 INFO  servlets.getUsers.doGet(getUsers.java:36) log ### JSON Values=> [{"user_id":3,"nombre":"David","apellido":"Fernandez","email":"davidfernandezsanz@gmail.com","password":"1234","telefono":"638673981","fecha_registro":"may 31, 2024","matricula":"499DB7B#64","username":"Davinci"},{"user_id":6,"nombre":"David","apellido":"Rodríguez","email":"info893@test.gov","password":"r2QM9\u003cqxg+A_","telefono":"629721940","fecha_registro":"may 31, 2024","matricula":"470#1DB949","username":"SadBear800"}] 
2024-06-04 19:51:43.627 INFO  servlets.updateUser.doPost(updateUser.java:34) log ### -- Update Product information --
2024-06-04 19:51:45.415 INFO  servlets.updateUser.doPost(updateUser.java:65) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: UPDATE users SET nombre =** NOT SPECIFIED **,apellido=** NOT SPECIFIED **,email=** NOT SPECIFIED **,password=** NOT SPECIFIED **,  telefono=** NOT SPECIFIED **,username =** NOT SPECIFIED ** WHERE email=** NOT SPECIFIED **
2024-06-04 19:51:45.899 ERROR servlets.updateUser.doPost(updateUser.java:83) log ### No se encontró un usuario con ese ID.
2024-06-04 19:51:53.380 INFO  servlets.deleteUser.doDelete(deleteUser.java:32) log ### --Delete User from DB --
2024-06-04 19:51:57.380 INFO  servlets.deleteUser.doDelete(deleteUser.java:41) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: DELETE FROM users WHERE user_id = 3
2024-06-04 19:51:58.081 ERROR servlets.deleteUser.doDelete(deleteUser.java:58) log ### Number Format Exception: {} java.sql.SQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`parking`.`reservas`, CONSTRAINT `user_id_fk` FOREIGN KEY (`user_id`) REFERENCES `users` (`user_id`))
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:118) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1061) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1009) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeLargeUpdate(ClientPreparedStatement.java:1320) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdate(ClientPreparedStatement.java:994) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at org.apache.tomcat.dbcp.dbcp2.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:137) ~[tomcat-dbcp.jar:10.1.16]
	at org.apache.tomcat.dbcp.dbcp2.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:137) ~[tomcat-dbcp.jar:10.1.16]
	at servlets.deleteUser.doDelete(deleteUser.java:43) ~[classes/:?]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:596) ~[servlet-api.jar:6.0]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[servlet-api.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-websocket.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[catalina.jar:10.1.16]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:673) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[catalina.jar:10.1.16]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340) ~[catalina.jar:10.1.16]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-util.jar:10.1.16]
	at java.lang.Thread.run(Thread.java:1623) ~[?:?]

2024-06-04 19:54:25.544 INFO  servlets.getUsers.doGet(getUsers.java:30) log ### -- Get Users information from DB--
2024-06-04 19:54:28.630 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 19:54:28.630 INFO  servlets.getUsers.doGet(getUsers.java:36) log ### JSON Values=> [] 
2024-06-04 19:54:33.696 INFO  servlets.generateUser.doPost(generateUser.java:31) log ### --Generate Random Data--
2024-06-04 19:54:38.277 INFO  logic.Logic.comprobarEmail(Logic.java:297) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT COUNT(*) FROM users WHERE email = 'member866@demo.com'
2024-06-04 19:54:38.277 INFO  servlets.generateUser.doPost(generateUser.java:55) log ### Query => com.mysql.cj.jdbc.ClientPreparedStatement: INSERT INTO users(nombre, apellido, email, password, telefono, fecha_registro, matricula, username) VALUES (** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **)
2024-06-04 19:54:38.631 INFO  servlets.generateUser.doPost(generateUser.java:69) log ### Usuario registrado con exito!
2024-06-04 19:54:42.051 INFO  servlets.getUsers.doGet(getUsers.java:30) log ### -- Get Users information from DB--
2024-06-04 19:54:45.327 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 19:54:45.335 INFO  servlets.getUsers.doGet(getUsers.java:36) log ### JSON Values=> [{"user_id":10,"nombre":"Lucía","apellido":"Hernández","email":"member866@demo.com","password":"_v5M9HIcd6tc","telefono":"788625181","fecha_registro":"jun 4, 2024","matricula":"9974TIN","username":"SadBear299"}] 
2024-06-04 19:54:52.257 INFO  servlets.updateUser.doPost(updateUser.java:34) log ### -- Update Product information --
2024-06-04 19:54:52.892 INFO  servlets.updateUser.doPost(updateUser.java:65) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: UPDATE users SET nombre =** NOT SPECIFIED **,apellido=** NOT SPECIFIED **,email=** NOT SPECIFIED **,password=** NOT SPECIFIED **,  telefono=** NOT SPECIFIED **,username =** NOT SPECIFIED ** WHERE email=** NOT SPECIFIED **
2024-06-04 19:54:53.208 INFO  servlets.updateUser.doPost(updateUser.java:79) log ### Usuario actualizado con éxito.
2024-06-04 19:54:53.234 INFO  servlets.getUsers.doGet(getUsers.java:30) log ### -- Get Users information from DB--
2024-06-04 19:54:56.276 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 19:54:56.276 INFO  servlets.getUsers.doGet(getUsers.java:36) log ### JSON Values=> [{"user_id":10,"nombre":"Lucía","apellido":"Hernánde","email":"member866@demo.com","password":"_v5M9HIcd6tc","telefono":"","fecha_registro":"jun 4, 2024","matricula":"9974TIN","username":"SadBear299"}] 
2024-06-04 19:55:03.386 INFO  servlets.deleteUser.doDelete(deleteUser.java:32) log ### --Delete User from DB --
2024-06-04 19:55:03.724 INFO  servlets.deleteUser.doDelete(deleteUser.java:41) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: DELETE FROM users WHERE user_id = 10
2024-06-04 19:55:04.092 INFO  servlets.deleteUser.doDelete(deleteUser.java:45) log ### Usuario eliminado con éxito.
2024-06-04 19:55:04.121 INFO  servlets.getUsers.doGet(getUsers.java:30) log ### -- Get Users information from DB--
2024-06-04 19:55:07.261 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 19:55:07.261 INFO  servlets.getUsers.doGet(getUsers.java:36) log ### JSON Values=> [] 
2024-06-04 19:55:28.334 INFO  servlets.generateUser.doPost(generateUser.java:31) log ### --Generate Random Data--
2024-06-04 19:55:30.154 INFO  logic.Logic.comprobarEmail(Logic.java:297) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT COUNT(*) FROM users WHERE email = 'support360@test.com'
2024-06-04 19:55:30.155 INFO  servlets.generateUser.doPost(generateUser.java:55) log ### Query => com.mysql.cj.jdbc.ClientPreparedStatement: INSERT INTO users(nombre, apellido, email, password, telefono, fecha_registro, matricula, username) VALUES (** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **)
2024-06-04 19:55:30.342 INFO  servlets.generateUser.doPost(generateUser.java:69) log ### Usuario registrado con exito!
2024-06-04 19:55:34.013 INFO  servlets.getUsers.doGet(getUsers.java:30) log ### -- Get Users information from DB--
2024-06-04 19:55:38.892 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 19:55:38.906 INFO  servlets.getUsers.doGet(getUsers.java:36) log ### JSON Values=> [{"user_id":11,"nombre":"Antonio","apellido":"Romero","email":"support360@test.com","password":"F\u0026Tl_4YG(\u003eAX","telefono":"778673442","fecha_registro":"jun 4, 2024","matricula":"5985SYX","username":"QuickBear815"}] 
2024-06-04 19:55:44.492 INFO  servlets.updateUser.doPost(updateUser.java:34) log ### -- Update Product information --
2024-06-04 19:55:44.727 INFO  servlets.updateUser.doPost(updateUser.java:65) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: UPDATE users SET nombre =** NOT SPECIFIED **,apellido=** NOT SPECIFIED **,email=** NOT SPECIFIED **,password=** NOT SPECIFIED **,  telefono=** NOT SPECIFIED **,username =** NOT SPECIFIED ** WHERE email=** NOT SPECIFIED **
2024-06-04 19:55:45.063 INFO  servlets.updateUser.doPost(updateUser.java:79) log ### Usuario actualizado con éxito.
2024-06-04 19:55:45.090 INFO  servlets.getUsers.doGet(getUsers.java:30) log ### -- Get Users information from DB--
2024-06-04 19:55:49.991 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 19:55:49.991 INFO  servlets.getUsers.doGet(getUsers.java:36) log ### JSON Values=> [{"user_id":11,"nombre":"Antonio","apellido":"Romero","email":"support360@test.com","password":"F\u0026Tl_4YG(\u003eAX","telefono":"","fecha_registro":"jun 4, 2024","matricula":"5985SYX","username":"QuickBear815"}] 
2024-06-04 19:56:43.472 INFO  servlets.getUsers.doGet(getUsers.java:30) log ### -- Get Users information from DB--
2024-06-04 19:56:44.024 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 19:56:44.025 INFO  servlets.getUsers.doGet(getUsers.java:36) log ### JSON Values=> [{"user_id":11,"nombre":"Antonio","apellido":"Romero","email":"support360@test.com","password":"F\u0026Tl_4YG(\u003eAX","telefono":"","fecha_registro":"jun 4, 2024","matricula":"5985SYX","username":"QuickBear815"}] 
2024-06-04 19:56:54.211 INFO  servlets.updateUser.doPost(updateUser.java:34) log ### -- Update Product information --
2024-06-04 19:56:54.571 INFO  servlets.updateUser.doPost(updateUser.java:65) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: UPDATE users SET nombre =** NOT SPECIFIED **,apellido=** NOT SPECIFIED **,email=** NOT SPECIFIED **,password=** NOT SPECIFIED **,  telefono=** NOT SPECIFIED **,username =** NOT SPECIFIED ** WHERE email=** NOT SPECIFIED **
2024-06-04 19:56:54.704 INFO  servlets.updateUser.doPost(updateUser.java:79) log ### Usuario actualizado con éxito.
2024-06-04 19:56:54.726 INFO  servlets.getUsers.doGet(getUsers.java:30) log ### -- Get Users information from DB--
2024-06-04 19:56:56.076 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 19:56:56.077 INFO  servlets.getUsers.doGet(getUsers.java:36) log ### JSON Values=> [{"user_id":11,"nombre":"Antonio","apellido":"Romero","email":"support360@test.com","password":"F\u0026Tl_4YG(\u003eAX","telefono":"","fecha_registro":"jun 4, 2024","matricula":"5985SYX","username":"QuickBear815"}] 
2024-06-04 20:00:37.462 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:19) log ### -->Suscribe Topics<--
2024-06-04 20:00:38.501 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:24) log ### -->Running weather Thread<--
2024-06-04 20:00:39.307 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-04 20:00:42.110 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-04 20:00:42.176 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-04 20:00:44.603 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-04 20:00:44.901 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-04 20:00:44.902 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-04 20:00:54.707 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-04 20:00:55.250 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-04 20:00:55.263 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-04 20:01:04.986 INFO  servlets.adminLogin.doPost(adminLogin.java:35) log ### --Admin login function --
2024-06-04 20:01:06.660 INFO  logic.Logic.getAdminFromDB(Logic.java:85) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM admin
2024-06-04 20:01:06.664 INFO  servlets.adminLogin.doPost(adminLogin.java:53) log ### Administrador loggeado correctamente admin
2024-06-04 20:01:07.005 INFO  servlets.getUsers.doGet(getUsers.java:30) log ### -- Get Users information from DB--
2024-06-04 20:01:07.300 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 20:01:07.309 INFO  servlets.getUsers.doGet(getUsers.java:36) log ### JSON Values=> [{"user_id":11,"nombre":"Antonio","apellido":"Romero","email":"support360@test.com","password":"F\u0026Tl_4YG(\u003eAX","telefono":"","fecha_registro":"jun 4, 2024","matricula":"5985SYX","username":"QuickBear815"}] 
2024-06-04 20:01:09.993 INFO  servlets.deleteUser.doDelete(deleteUser.java:32) log ### --Delete User from DB --
2024-06-04 20:01:10.181 INFO  servlets.deleteUser.doDelete(deleteUser.java:41) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: DELETE FROM users WHERE user_id = 11
2024-06-04 20:01:10.297 INFO  servlets.deleteUser.doDelete(deleteUser.java:45) log ### Usuario eliminado con éxito.
2024-06-04 20:01:10.324 INFO  servlets.getUsers.doGet(getUsers.java:30) log ### -- Get Users information from DB--
2024-06-04 20:01:11.784 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 20:01:11.792 INFO  servlets.getUsers.doGet(getUsers.java:36) log ### JSON Values=> [] 
2024-06-04 20:01:13.050 INFO  servlets.getUsers.doGet(getUsers.java:30) log ### -- Get Users information from DB--
2024-06-04 20:01:13.338 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 20:01:13.339 INFO  servlets.getUsers.doGet(getUsers.java:36) log ### JSON Values=> [] 
2024-06-04 20:01:16.363 INFO  servlets.generateUser.doPost(generateUser.java:31) log ### --Generate Random Data--
2024-06-04 20:01:17.883 INFO  logic.Logic.comprobarEmail(Logic.java:297) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT COUNT(*) FROM users WHERE email = 'member643@webmail.net'
2024-06-04 20:01:17.883 INFO  servlets.generateUser.doPost(generateUser.java:55) log ### Query => com.mysql.cj.jdbc.ClientPreparedStatement: INSERT INTO users(nombre, apellido, email, password, telefono, fecha_registro, matricula, username) VALUES (** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **)
2024-06-04 20:01:17.996 INFO  servlets.generateUser.doPost(generateUser.java:69) log ### Usuario registrado con exito!
2024-06-04 20:01:21.890 INFO  servlets.getUsers.doGet(getUsers.java:30) log ### -- Get Users information from DB--
2024-06-04 20:01:23.082 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 20:01:23.084 INFO  servlets.getUsers.doGet(getUsers.java:36) log ### JSON Values=> [{"user_id":12,"nombre":"Laura","apellido":"Jiménez","email":"member643@webmail.net","password":"pCi\u003eH(VZ%9F5","telefono":"635784159","fecha_registro":"jun 4, 2024","matricula":"6097WDW","username":"LuckyCat774"}] 
2024-06-04 20:01:34.164 INFO  servlets.updateUser.doPost(updateUser.java:34) log ### -- Update Product information --
2024-06-04 20:01:34.350 INFO  servlets.updateUser.doPost(updateUser.java:65) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: UPDATE users SET nombre =** NOT SPECIFIED **,apellido=** NOT SPECIFIED **,email=** NOT SPECIFIED **,password=** NOT SPECIFIED **,telefono=** NOT SPECIFIED **,username =** NOT SPECIFIED ** WHERE email=** NOT SPECIFIED **
2024-06-04 20:01:35.080 INFO  servlets.updateUser.doPost(updateUser.java:79) log ### Usuario actualizado con éxito.
2024-06-04 20:01:35.119 INFO  servlets.getUsers.doGet(getUsers.java:30) log ### -- Get Users information from DB--
2024-06-04 20:01:36.917 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 20:01:36.917 INFO  servlets.getUsers.doGet(getUsers.java:36) log ### JSON Values=> [{"user_id":12,"nombre":"Laura","apellido":"Jiménez","email":"member643@webmail.net","password":"pCi\u003eH(VZ%9F5","telefono":"635784150","fecha_registro":"jun 4, 2024","matricula":"6097WDW","username":"LuckyCat774"}] 
2024-06-04 20:01:47.296 INFO  servlets.getUsers.doGet(getUsers.java:30) log ### -- Get Users information from DB--
2024-06-04 20:01:47.733 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 20:01:47.733 INFO  servlets.getUsers.doGet(getUsers.java:36) log ### JSON Values=> [{"user_id":12,"nombre":"Laura","apellido":"Jiménez","email":"member643@webmail.net","password":"pCi\u003eH(VZ%9F5","telefono":"635784150","fecha_registro":"jun 4, 2024","matricula":"6097WDW","username":"LuckyCat774"}] 
2024-06-04 20:01:52.961 INFO  servlets.getUsers.doGet(getUsers.java:30) log ### -- Get Users information from DB--
2024-06-04 20:01:53.246 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 20:01:53.246 INFO  servlets.getUsers.doGet(getUsers.java:36) log ### JSON Values=> [{"user_id":12,"nombre":"Laura","apellido":"Jiménez","email":"member643@webmail.net","password":"pCi\u003eH(VZ%9F5","telefono":"635784150","fecha_registro":"jun 4, 2024","matricula":"6097WDW","username":"LuckyCat774"}] 
2024-06-04 20:04:41.422 INFO  servlets.getUsers.doGet(getUsers.java:30) log ### -- Get Users information from DB--
2024-06-04 20:04:41.716 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-04 20:04:41.717 INFO  servlets.getUsers.doGet(getUsers.java:36) log ### JSON Values=> [{"user_id":12,"nombre":"Laura","apellido":"Jiménez","email":"member643@webmail.net","password":"pCi\u003eH(VZ%9F5","telefono":"635784150","fecha_registro":"jun 4, 2024","matricula":"6097WDW","username":"LuckyCat774"}] 
2024-06-04 20:07:58.326 INFO  servlets.getReservas.doGet(getReservas.java:28) log ### -- Get Reservas information from DB--
2024-06-04 20:07:58.619 INFO  logic.Logic.getReservasFromDB(Logic.java:167) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM reservas
2024-06-04 20:07:58.621 INFO  servlets.getReservas.doGet(getReservas.java:34) log ### JSON Values=> [] 
2024-06-04 20:09:46.044 INFO  servlets.getReservas.doGet(getReservas.java:28) log ### -- Get Reservas information from DB--
2024-06-04 20:09:46.317 INFO  logic.Logic.getReservasFromDB(Logic.java:167) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM reservas
2024-06-04 20:09:46.317 INFO  servlets.getReservas.doGet(getReservas.java:34) log ### JSON Values=> [] 
2024-06-04 20:09:53.934 INFO  servlets.generateReserva.doPost(generateReserva.java:35) log ### --Generate Random Reserva--
2024-06-04 20:09:54.536 INFO  logic.Logic.getUsersID(Logic.java:448) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT user_id FROM users
2024-06-04 20:09:55.833 INFO  logic.Logic.getParkingsID(Logic.java:501) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT parking_id FROM parkings
2024-06-04 20:09:57.852 INFO  logic.Logic.getPlazaIDFromParking(Logic.java:554) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT id_plaza FROM plaza WHERE id_parking= 2 AND ocupado = 0 
2024-06-04 20:09:58.998 INFO  servlets.generateReserva.doPost(generateReserva.java:61) log ### Query => com.mysql.cj.jdbc.ClientPreparedStatement: INSERT INTO reservas(user_id, parking_id, fecha_reserva, hora_inicio, hora_fin, id_plaza) VALUES (** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **)
2024-06-04 20:09:59.169 INFO  servlets.generateReserva.doPost(generateReserva.java:73) log ### Reserva registrada con exito!
2024-06-04 20:10:05.649 INFO  servlets.getReservas.doGet(getReservas.java:28) log ### -- Get Reservas information from DB--
2024-06-04 20:10:05.952 INFO  logic.Logic.getReservasFromDB(Logic.java:167) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM reservas
2024-06-04 20:10:05.965 INFO  servlets.getReservas.doGet(getReservas.java:34) log ### JSON Values=> [{"reserva_id":10,"user_id":12,"parking_id":2,"fecha_reserva":"dic 9, 2024","hora_inicio":"Dec 9, 2024, 9:24:23 AM","hora_fin":"Dec 9, 2024, 9:54:25 PM","id_plaza":32}] 
2024-06-04 20:11:50.115 INFO  servlets.getReservas.doGet(getReservas.java:28) log ### -- Get Reservas information from DB--
2024-06-04 20:11:50.402 INFO  logic.Logic.getReservasFromDB(Logic.java:167) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM reservas
2024-06-04 20:11:50.403 INFO  servlets.getReservas.doGet(getReservas.java:34) log ### JSON Values=> [{"reserva_id":10,"user_id":12,"parking_id":2,"fecha_reserva":"dic 9, 2024","hora_inicio":"Dec 9, 2024, 9:24:23 AM","hora_fin":"Dec 9, 2024, 9:54:25 PM","id_plaza":32}] 
2024-06-04 20:12:42.826 INFO  servlets.getReservas.doGet(getReservas.java:28) log ### -- Get Reservas information from DB--
2024-06-04 20:12:43.114 INFO  logic.Logic.getReservasFromDB(Logic.java:167) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM reservas
2024-06-04 20:12:43.115 INFO  servlets.getReservas.doGet(getReservas.java:34) log ### JSON Values=> [{"reserva_id":10,"user_id":12,"parking_id":2,"fecha_reserva":"dic 9, 2024","hora_inicio":"Dec 9, 2024, 9:24:23 AM","hora_fin":"Dec 9, 2024, 9:54:25 PM","id_plaza":32}] 
2024-06-04 20:15:54.449 INFO  servlets.getReservas.doGet(getReservas.java:28) log ### -- Get Reservas information from DB--
2024-06-04 20:15:55.241 INFO  logic.Logic.getReservasFromDB(Logic.java:167) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM reservas
2024-06-04 20:15:55.241 INFO  servlets.getReservas.doGet(getReservas.java:34) log ### JSON Values=> [] 
2024-06-05 17:41:22.594 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:19) log ### -->Suscribe Topics<--
2024-06-05 17:41:23.463 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:24) log ### -->Running weather Thread<--
2024-06-05 17:41:33.754 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:16) log ### -->Suscribe Topics<--
2024-06-05 17:48:28.567 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:16) log ### -->Suscribe Topics<--
2024-06-05 17:49:05.526 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:16) log ### -->Suscribe Topics<--