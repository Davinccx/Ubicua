-- VENDIFY LOGS --
2023-12-17 17:49:42.061 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 17:49:45.722 INFO  logic.Logic.getUsersFromDB(Logic.java:71) log ### Query=> sql : 'SELECT * FROM users', parameters : []
2023-12-17 17:49:49.763 INFO  logic.Logic.getAdminFromDB(Logic.java:112) log ### Query=> sql : 'SELECT * FROM admin', parameters : []
2023-12-17 18:33:37.922 INFO  logic.Logic.getUsersFromDB(Logic.java:71) log ### Query=> sql : 'SELECT * FROM users', parameters : []
2023-12-17 18:33:58.695 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:34:19.137 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:34:53.267 INFO  logic.Logic.getAdminFromDB(Logic.java:112) log ### Query=> sql : 'SELECT * FROM admin', parameters : []
2023-12-17 18:34:53.307 INFO  logic.Logic.getUsersFromDB(Logic.java:71) log ### Query=> sql : 'SELECT * FROM users', parameters : []
2023-12-17 18:35:00.179 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:35:39.185 INFO  logic.Logic.getUsersFromDB(Logic.java:71) log ### Query=> sql : 'SELECT * FROM users', parameters : []
2023-12-17 18:35:41.257 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:37:14.024 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:37:14.460 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:37:14.850 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:37:15.188 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:37:15.492 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:38:50.237 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:38:50.685 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:38:50.956 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:38:51.364 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:38:51.637 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:39:45.805 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:39:46.165 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:39:46.333 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:39:46.517 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:39:46.872 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:39:49.636 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:39:50.064 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:39:50.204 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:39:50.370 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:39:50.525 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:39:50.693 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:41:11.693 INFO  logic.Logic.getAdminFromDB(Logic.java:112) log ### Query=> sql : 'SELECT * FROM admin', parameters : []
2023-12-17 18:41:16.641 INFO  logic.Logic.getAdminFromDB(Logic.java:112) log ### Query=> sql : 'SELECT * FROM admin', parameters : []
2023-12-17 18:41:16.677 INFO  logic.Logic.getUsersFromDB(Logic.java:71) log ### Query=> sql : 'SELECT * FROM users', parameters : []
2023-12-17 18:41:19.990 INFO  logic.Logic.getUsersFromDB(Logic.java:71) log ### Query=> sql : 'SELECT * FROM users', parameters : []
2023-12-17 18:41:21.125 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:41:28.507 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:43:32.469 INFO  logic.Logic.getUsersFromDB(Logic.java:71) log ### Query=> sql : 'SELECT * FROM users', parameters : []
2023-12-17 18:43:36.403 INFO  logic.Logic.getUsersFromDB(Logic.java:71) log ### Query=> sql : 'SELECT * FROM users', parameters : []
2023-12-17 18:43:37.707 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:44:00.362 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:44:00.797 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:44:00.953 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:44:01.117 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:44:01.265 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:44:01.413 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:45:38.345 INFO  logic.Logic.getUsersFromDB(Logic.java:71) log ### Query=> sql : 'SELECT * FROM users', parameters : []
2023-12-17 18:45:39.768 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:45:43.225 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:45:43.607 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:47:26.186 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:47:27.010 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:47:27.152 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:47:50.953 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:47:51.317 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:47:51.466 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:47:51.620 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:47:51.766 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:48:03.758 INFO  logic.Logic.getAdminFromDB(Logic.java:112) log ### Query=> sql : 'SELECT * FROM admin', parameters : []
2023-12-17 18:48:08.751 INFO  logic.Logic.getAdminFromDB(Logic.java:112) log ### Query=> sql : 'SELECT * FROM admin', parameters : []
2023-12-17 18:48:08.783 INFO  logic.Logic.getUsersFromDB(Logic.java:71) log ### Query=> sql : 'SELECT * FROM users', parameters : []
2023-12-17 18:51:46.831 INFO  logic.Logic.getUsersFromDB(Logic.java:71) log ### Query=> sql : 'SELECT * FROM users', parameters : []
2023-12-17 18:51:47.346 INFO  logic.Logic.getUsersFromDB(Logic.java:71) log ### Query=> sql : 'SELECT * FROM users', parameters : []
2023-12-17 18:51:52.558 INFO  logic.Logic.getUsersFromDB(Logic.java:71) log ### Query=> sql : 'SELECT * FROM users', parameters : []
2023-12-17 18:51:55.670 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:51:57.195 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:51:57.518 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:51:58.971 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:52:10.404 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:52:13.415 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:54:28.835 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:55:31.034 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:55:31.736 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:55:58.737 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:56:12.872 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:56:20.010 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:56:28.947 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:56:29.465 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:56:29.727 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:56:29.915 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:56:37.988 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:56:38.595 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:56:38.950 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:56:47.937 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:57:16.797 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:57:17.301 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:57:17.516 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:57:32.932 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:57:45.201 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:58:02.026 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:58:02.454 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:58:02.649 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:58:02.801 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:58:15.037 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:58:23.115 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:58:39.789 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 18:58:42.067 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:00:53.939 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:01:03.622 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:01:16.458 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:01:31.896 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:01:38.688 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:02:57.529 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:03:05.574 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:03:36.082 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:03:42.960 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:03:54.671 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:07:21.351 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:07:21.824 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:07:34.913 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:08:19.096 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:08:21.110 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:08:22.862 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:09:16.240 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:09:18.707 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:09:30.047 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:09:59.662 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:10:01.353 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:10:02.580 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:10:05.125 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:10:33.325 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:11:03.722 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:11:05.189 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:11:46.596 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:11:48.570 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:11:49.447 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:13:45.035 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:14:07.949 INFO  logic.Logic.getUsersFromDB(Logic.java:71) log ### Query=> sql : 'SELECT * FROM users', parameters : []
2023-12-17 19:14:40.651 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:15:20.561 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:15:22.141 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:15:24.072 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:15:27.066 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:15:57.739 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:15:58.240 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:16:02.479 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:16:02.823 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:16:09.868 ERROR logic.Logic.getUsersFromDB(Logic.java:88) log ### Error: {} java.lang.NullPointerException: SQL connection is null
	at database.ConnectionDDBB.obtainConnection(ConnectionDDBB.java:39) ~[classes/:?]
	at logic.Logic.getUsersFromDB(Logic.java:67) ~[classes/:?]
	at servlets.userLogin.doPost(userLogin.java:44) ~[classes/:?]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[servlet-api.jar:6.0]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[servlet-api.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-websocket.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[catalina.jar:10.1.16]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:673) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[catalina.jar:10.1.16]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340) ~[catalina.jar:10.1.16]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-util.jar:10.1.16]
	at java.lang.Thread.run(Thread.java:1623) ~[?:?]

2023-12-17 19:16:51.883 ERROR logic.Logic.getUsersFromDB(Logic.java:88) log ### Error: {} java.lang.NullPointerException: SQL connection is null
	at database.ConnectionDDBB.obtainConnection(ConnectionDDBB.java:39) ~[classes/:?]
	at logic.Logic.getUsersFromDB(Logic.java:67) ~[classes/:?]
	at servlets.getUser.doGet(getUser.java:33) ~[classes/:?]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564) ~[servlet-api.jar:6.0]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[servlet-api.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-websocket.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[catalina.jar:10.1.16]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:673) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[catalina.jar:10.1.16]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340) ~[catalina.jar:10.1.16]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-util.jar:10.1.16]
	at java.lang.Thread.run(Thread.java:1623) ~[?:?]

2023-12-17 19:18:48.465 INFO  logic.Logic.getUsersFromDB(Logic.java:71) log ### Query=> sql : 'SELECT * FROM users', parameters : []
2023-12-17 19:18:55.348 INFO  logic.Logic.getUsersFromDB(Logic.java:71) log ### Query=> sql : 'SELECT * FROM users', parameters : []
2023-12-17 19:18:58.322 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:19:00.105 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:19:02.189 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:20:47.295 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:20:48.388 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:20:48.619 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:20:48.853 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:20:50.060 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:20:53.107 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:20:54.921 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:21:10.621 ERROR logic.Logic.getUsersFromDB(Logic.java:88) log ### Error: {} java.lang.NullPointerException: SQL connection is null
	at database.ConnectionDDBB.obtainConnection(ConnectionDDBB.java:39) ~[classes/:?]
	at logic.Logic.getUsersFromDB(Logic.java:67) ~[classes/:?]
	at servlets.userLogin.doPost(userLogin.java:44) ~[classes/:?]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[servlet-api.jar:6.0]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[servlet-api.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-websocket.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[catalina.jar:10.1.16]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:673) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[catalina.jar:10.1.16]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340) ~[catalina.jar:10.1.16]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-util.jar:10.1.16]
	at java.lang.Thread.run(Thread.java:1623) ~[?:?]

2023-12-17 19:21:32.134 INFO  logic.Logic.getUsersFromDB(Logic.java:71) log ### Query=> sql : 'SELECT * FROM users', parameters : []
2023-12-17 19:21:37.492 INFO  logic.Logic.getUsersFromDB(Logic.java:71) log ### Query=> sql : 'SELECT * FROM users', parameters : []
2023-12-17 19:21:39.592 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:21:58.594 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:22:00.130 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:22:00.315 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:22:00.498 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:22:34.570 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:22:48.326 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:22:49.343 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:22:49.704 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:22:49.852 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:22:50.017 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:22:50.173 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:22:51.519 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:22:51.878 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:22:52.061 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:22:52.211 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:22:58.964 ERROR logic.Logic.getUsersFromDB(Logic.java:88) log ### Error: {} java.lang.NullPointerException: SQL connection is null
	at database.ConnectionDDBB.obtainConnection(ConnectionDDBB.java:39) ~[classes/:?]
	at logic.Logic.getUsersFromDB(Logic.java:67) ~[classes/:?]
	at servlets.userLogin.doPost(userLogin.java:44) ~[classes/:?]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[servlet-api.jar:6.0]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[servlet-api.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-websocket.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[catalina.jar:10.1.16]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:673) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[catalina.jar:10.1.16]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340) ~[catalina.jar:10.1.16]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-util.jar:10.1.16]
	at java.lang.Thread.run(Thread.java:1623) ~[?:?]

2023-12-17 19:23:39.978 INFO  logic.Logic.getUsersFromDB(Logic.java:71) log ### Query=> sql : 'SELECT * FROM users', parameters : []
2023-12-17 19:23:42.088 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:25:32.535 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:25:33.351 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:25:33.816 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:25:34.131 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:25:34.306 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:25:34.478 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:25:34.638 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:25:34.816 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:25:35.050 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:25:52.841 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:25:54.198 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:25:56.597 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:26:20.641 INFO  logic.Logic.getUsersFromDB(Logic.java:71) log ### Query=> sql : 'SELECT * FROM users', parameters : []
2023-12-17 19:26:23.390 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:26:46.835 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:27:11.816 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:27:31.635 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:27:51.876 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:29:01.264 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:29:02.863 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:29:17.243 ERROR logic.Logic.getUsersFromDB(Logic.java:88) log ### Error: {} java.lang.NullPointerException: SQL connection is null
	at database.ConnectionDDBB.obtainConnection(ConnectionDDBB.java:39) ~[classes/:?]
	at logic.Logic.getUsersFromDB(Logic.java:67) ~[classes/:?]
	at servlets.userLogin.doPost(userLogin.java:44) ~[classes/:?]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[servlet-api.jar:6.0]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[servlet-api.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-websocket.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[catalina.jar:10.1.16]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:673) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[catalina.jar:10.1.16]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340) ~[catalina.jar:10.1.16]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-util.jar:10.1.16]
	at java.lang.Thread.run(Thread.java:1623) ~[?:?]

2023-12-17 19:31:03.580 ERROR logic.Logic.getUsersFromDB(Logic.java:88) log ### Error: {} java.lang.NullPointerException: SQL connection is null
	at database.ConnectionDDBB.obtainConnection(ConnectionDDBB.java:39) ~[classes/:?]
	at logic.Logic.getUsersFromDB(Logic.java:67) ~[classes/:?]
	at servlets.getUser.doGet(getUser.java:33) ~[classes/:?]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564) ~[servlet-api.jar:6.0]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[servlet-api.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-websocket.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[catalina.jar:10.1.16]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:673) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[catalina.jar:10.1.16]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340) ~[catalina.jar:10.1.16]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-util.jar:10.1.16]
	at java.lang.Thread.run(Thread.java:1623) ~[?:?]

2023-12-17 19:34:58.063 INFO  logic.Logic.getUsersFromDB(Logic.java:71) log ### Query=> sql : 'SELECT * FROM users', parameters : []
2023-12-17 19:35:07.884 INFO  logic.Logic.getUsersFromDB(Logic.java:71) log ### Query=> sql : 'SELECT * FROM users', parameters : []
2023-12-17 19:35:09.355 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:35:12.482 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:35:29.050 INFO  logic.Logic.getAdminFromDB(Logic.java:112) log ### Query=> sql : 'SELECT * FROM admin', parameters : []
2023-12-17 19:35:29.102 INFO  logic.Logic.getUsersFromDB(Logic.java:71) log ### Query=> sql : 'SELECT * FROM users', parameters : []
2023-12-17 19:35:37.027 INFO  logic.Logic.getProductosFromDB(Logic.java:32) log ### Query=> sql : 'SELECT * FROM productos', parameters : []
2023-12-17 19:37:20.843 INFO  logic.Logic.getAdminFromDB(Logic.java:112) log ### Query=> sql : 'SELECT * FROM admin', parameters : []
2023-12-17 19:37:20.880 INFO  logic.Logic.getUsersFromDB(Logic.java:71) log ### Query=> sql : 'SELECT * FROM users', parameters : []