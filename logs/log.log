-- UBIPARK LOGS --
2024-06-05 18:08:56.998 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:20) log ### -->Suscribe Topics<--
2024-06-05 18:09:00.266 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 18:09:05.116 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 18:09:05.201 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":2},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":6},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 18:10:32.133 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:20) log ### -->Suscribe Topics<--
2024-06-05 18:10:34.341 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 18:10:39.125 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 18:10:39.203 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":2},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":6},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 18:11:57.284 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:20) log ### -->Suscribe Topics<--
2024-06-05 18:12:03.271 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 18:12:09.249 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 18:12:09.315 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":2},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":6},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 18:14:32.088 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:20) log ### -->Suscribe Topics<--
2024-06-05 18:14:34.620 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 18:14:38.683 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 18:14:38.749 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":2},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":6},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 18:15:45.792 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:20) log ### -->Suscribe Topics<--
2024-06-05 18:15:48.525 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 18:15:52.505 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 18:15:52.573 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":2},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":6},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 18:35:09.862 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:20) log ### -->Suscribe Topics<--
2024-06-05 18:35:44.535 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 18:35:49.505 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 18:35:49.642 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":2},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":6},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 18:49:35.119 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:20) log ### -->Suscribe Topics<--
2024-06-05 18:49:38.738 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 18:49:43.139 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 18:49:43.342 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":2},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":6},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 18:57:25.672 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:20) log ### -->Suscribe Topics<--
2024-06-05 18:57:33.860 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 18:57:36.978 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 18:57:37.153 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":2},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":6},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 18:57:43.504 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 18:57:43.840 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 18:57:43.843 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":2},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":6},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 18:58:47.331 INFO  servlets.userLogin.doPost(userLogin.java:30) log ### -- User login function --
2024-06-05 18:59:11.274 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 18:59:11.291 INFO  servlets.userLogin.doPost(userLogin.java:65) log ### Usuario LuckyCat774 loggeado correctamente
2024-06-05 18:59:11.337 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 18:59:11.545 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 18:59:11.631 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 18:59:11.930 INFO  logic.Logic.getReservasFromDB(Logic.java:167) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM reservas
2024-06-05 18:59:11.938 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:72) log ### JSON => [{"reserva_id":40,"user_id":12,"parking_id":2,"fecha_reserva":"nov 17, 2024","hora_inicio":"Nov 17, 2024, 7:26:27 PM","hora_fin":"Nov 17, 2024, 9:28:03 PM","id_plaza":29},{"reserva_id":41,"user_id":12,"parking_id":1,"fecha_reserva":"ago 9, 2024","hora_inicio":"Aug 9, 2024, 3:59:50 AM","hora_fin":"Aug 9, 2024, 4:19:03 AM","id_plaza":10},{"reserva_id":42,"user_id":12,"parking_id":2,"fecha_reserva":"nov 17, 2024","hora_inicio":"Nov 17, 2024, 4:39:40 PM","hora_fin":"Nov 17, 2024, 11:48:00 PM","id_plaza":26}]
2024-06-05 18:59:12.647 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 18:59:12.651 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:51) log ### JSON => {"user_id":12,"nombre":"Laura","apellido":"Jiménez","email":"member643@webmail.net","password":"1234","telefono":"638673821","fecha_registro":"jun 4, 2024","matricula":"6097WDW","username":"LuckyCat774"}
2024-06-05 18:59:24.777 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 18:59:25.088 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 18:59:25.089 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":2},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":6},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 18:59:26.832 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:35) log ### -- Get Plazas from parking information from DB--
2024-06-05 18:59:27.039 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:50) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM plaza WHERE id_parking = 2
2024-06-05 18:59:46.883 INFO  logic.Logic.getUsersIDFromUsername(Logic.java:469) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT user_id FROM users WHERE username = NULL
2024-06-05 18:59:47.000 ERROR servlets.registerReserva.doPost(registerReserva.java:91) log ### Number Format Exception: {} java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
	at jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:100) ~[?:?]
	at jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:106) ~[?:?]
	at jdk.internal.util.Preconditions.checkIndex(Preconditions.java:302) ~[?:?]
	at java.util.Objects.checkIndex(Objects.java:385) ~[?:?]
	at java.util.ArrayList.get(ArrayList.java:427) ~[?:?]
	at servlets.registerReserva.doPost(registerReserva.java:40) ~[classes/:?]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[servlet-api.jar:6.0]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[servlet-api.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-websocket.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[catalina.jar:10.1.16]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:673) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[catalina.jar:10.1.16]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340) ~[catalina.jar:10.1.16]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-util.jar:10.1.16]
	at java.lang.Thread.run(Thread.java:1623) ~[?:?]

2024-06-05 19:11:42.374 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:20) log ### -->Suscribe Topics<--
2024-06-05 19:11:45.187 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 19:11:48.880 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 19:11:49.057 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":2},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":6},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 19:11:52.215 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 19:11:52.622 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 19:11:52.625 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":2},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":6},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 19:12:08.856 INFO  servlets.userLogin.doPost(userLogin.java:30) log ### -- User login function --
2024-06-05 19:12:10.733 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:12:10.738 INFO  servlets.userLogin.doPost(userLogin.java:65) log ### Usuario LuckyCat774 loggeado correctamente
2024-06-05 19:12:10.790 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:12:11.144 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:12:12.066 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:12:12.205 INFO  logic.Logic.getReservasFromDB(Logic.java:167) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM reservas
2024-06-05 19:12:12.212 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:72) log ### JSON => [{"reserva_id":40,"user_id":12,"parking_id":2,"fecha_reserva":"nov 17, 2024","hora_inicio":"Nov 17, 2024, 7:26:27 PM","hora_fin":"Nov 17, 2024, 9:28:03 PM","id_plaza":29},{"reserva_id":41,"user_id":12,"parking_id":1,"fecha_reserva":"ago 9, 2024","hora_inicio":"Aug 9, 2024, 3:59:50 AM","hora_fin":"Aug 9, 2024, 4:19:03 AM","id_plaza":10},{"reserva_id":42,"user_id":12,"parking_id":2,"fecha_reserva":"nov 17, 2024","hora_inicio":"Nov 17, 2024, 4:39:40 PM","hora_fin":"Nov 17, 2024, 11:48:00 PM","id_plaza":26}]
2024-06-05 19:12:13.792 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:12:13.798 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:51) log ### JSON => {"user_id":12,"nombre":"Laura","apellido":"Jiménez","email":"member643@webmail.net","password":"1234","telefono":"638673821","fecha_registro":"jun 4, 2024","matricula":"6097WDW","username":"LuckyCat774"}
2024-06-05 19:12:13.846 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 19:12:14.148 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 19:12:14.151 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":2},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":6},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 19:12:17.026 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:35) log ### -- Get Plazas from parking information from DB--
2024-06-05 19:12:17.446 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:50) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM plaza WHERE id_parking = 4
2024-06-05 19:12:32.932 INFO  logic.Logic.getUsersIDFromUsername(Logic.java:470) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT user_id FROM users WHERE username = NULL
2024-06-05 19:12:33.036 ERROR servlets.registerReserva.doPost(registerReserva.java:91) log ### Number Format Exception: {} java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
	at jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:100) ~[?:?]
	at jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:106) ~[?:?]
	at jdk.internal.util.Preconditions.checkIndex(Preconditions.java:302) ~[?:?]
	at java.util.Objects.checkIndex(Objects.java:385) ~[?:?]
	at java.util.ArrayList.get(ArrayList.java:427) ~[?:?]
	at servlets.registerReserva.doPost(registerReserva.java:40) ~[classes/:?]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[servlet-api.jar:6.0]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[servlet-api.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-websocket.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[catalina.jar:10.1.16]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:673) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[catalina.jar:10.1.16]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340) ~[catalina.jar:10.1.16]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-util.jar:10.1.16]
	at java.lang.Thread.run(Thread.java:1623) ~[?:?]

2024-06-05 19:14:26.612 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 19:14:26.928 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 19:14:26.930 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":2},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":6},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 19:14:29.276 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:35) log ### -- Get Plazas from parking information from DB--
2024-06-05 19:14:29.494 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:50) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM plaza WHERE id_parking = 2
2024-06-05 19:14:43.979 INFO  logic.Logic.getUsersIDFromUsername(Logic.java:470) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT user_id FROM users WHERE username = NULL
2024-06-05 19:14:44.087 ERROR servlets.registerReserva.doPost(registerReserva.java:91) log ### Number Format Exception: {} java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
	at jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:100) ~[?:?]
	at jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:106) ~[?:?]
	at jdk.internal.util.Preconditions.checkIndex(Preconditions.java:302) ~[?:?]
	at java.util.Objects.checkIndex(Objects.java:385) ~[?:?]
	at java.util.ArrayList.get(ArrayList.java:427) ~[?:?]
	at servlets.registerReserva.doPost(registerReserva.java:40) ~[classes/:?]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[servlet-api.jar:6.0]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[servlet-api.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-websocket.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[catalina.jar:10.1.16]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:673) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[catalina.jar:10.1.16]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340) ~[catalina.jar:10.1.16]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-util.jar:10.1.16]
	at java.lang.Thread.run(Thread.java:1623) ~[?:?]

2024-06-05 19:17:52.682 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:20) log ### -->Suscribe Topics<--
2024-06-05 19:18:03.407 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 19:18:07.645 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 19:18:07.781 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":2},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":6},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 19:18:17.763 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 19:18:18.105 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 19:18:18.105 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":2},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":6},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 19:18:23.579 INFO  servlets.userLogin.doPost(userLogin.java:30) log ### -- User login function --
2024-06-05 19:18:25.589 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:18:25.604 INFO  servlets.userLogin.doPost(userLogin.java:65) log ### Usuario LuckyCat774 loggeado correctamente
2024-06-05 19:18:25.650 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:18:25.682 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:18:25.970 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:18:26.704 INFO  logic.Logic.getReservasFromDB(Logic.java:167) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM reservas
2024-06-05 19:18:26.707 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:72) log ### JSON => [{"reserva_id":40,"user_id":12,"parking_id":2,"fecha_reserva":"nov 17, 2024","hora_inicio":"Nov 17, 2024, 7:26:27 PM","hora_fin":"Nov 17, 2024, 9:28:03 PM","id_plaza":29},{"reserva_id":41,"user_id":12,"parking_id":1,"fecha_reserva":"ago 9, 2024","hora_inicio":"Aug 9, 2024, 3:59:50 AM","hora_fin":"Aug 9, 2024, 4:19:03 AM","id_plaza":10},{"reserva_id":42,"user_id":12,"parking_id":2,"fecha_reserva":"nov 17, 2024","hora_inicio":"Nov 17, 2024, 4:39:40 PM","hora_fin":"Nov 17, 2024, 11:48:00 PM","id_plaza":26}]
2024-06-05 19:18:27.538 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:18:27.544 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:51) log ### JSON => {"user_id":12,"nombre":"Laura","apellido":"Jiménez","email":"member643@webmail.net","password":"1234","telefono":"638673821","fecha_registro":"jun 4, 2024","matricula":"6097WDW","username":"LuckyCat774"}
2024-06-05 19:18:29.477 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 19:18:29.840 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 19:18:29.840 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":2},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":6},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 19:18:31.075 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:35) log ### -- Get Plazas from parking information from DB--
2024-06-05 19:18:31.290 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:50) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM plaza WHERE id_parking = 2
2024-06-05 19:18:47.069 ERROR servlets.registerReserva.doPost(registerReserva.java:87) log ### Number Format Exception: {} java.lang.NumberFormatException: Cannot parse null string
	at java.lang.Integer.parseInt(Integer.java:627) ~[?:?]
	at java.lang.Integer.parseInt(Integer.java:781) ~[?:?]
	at servlets.registerReserva.doPost(registerReserva.java:41) ~[classes/:?]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[servlet-api.jar:6.0]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[servlet-api.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-websocket.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[catalina.jar:10.1.16]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:673) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[catalina.jar:10.1.16]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340) ~[catalina.jar:10.1.16]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-util.jar:10.1.16]
	at java.lang.Thread.run(Thread.java:1623) ~[?:?]

2024-06-05 19:35:11.803 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:20) log ### -->Suscribe Topics<--
2024-06-05 19:35:24.305 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 19:35:28.720 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 19:35:28.863 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":2},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":6},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 19:35:36.548 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 19:35:36.898 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 19:35:36.900 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":2},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":6},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 19:35:48.243 INFO  servlets.userLogin.doPost(userLogin.java:30) log ### -- User login function --
2024-06-05 19:35:50.027 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:35:50.038 INFO  servlets.userLogin.doPost(userLogin.java:65) log ### Usuario LuckyCat774 loggeado correctamente
2024-06-05 19:35:50.085 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:35:50.114 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:35:50.409 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:35:50.714 INFO  logic.Logic.getReservasFromDB(Logic.java:167) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM reservas
2024-06-05 19:35:50.726 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:72) log ### JSON => [{"reserva_id":40,"user_id":12,"parking_id":2,"fecha_reserva":"nov 17, 2024","hora_inicio":"Nov 17, 2024, 7:26:27 PM","hora_fin":"Nov 17, 2024, 9:28:03 PM","id_plaza":29},{"reserva_id":41,"user_id":12,"parking_id":1,"fecha_reserva":"ago 9, 2024","hora_inicio":"Aug 9, 2024, 3:59:50 AM","hora_fin":"Aug 9, 2024, 4:19:03 AM","id_plaza":10},{"reserva_id":42,"user_id":12,"parking_id":2,"fecha_reserva":"nov 17, 2024","hora_inicio":"Nov 17, 2024, 4:39:40 PM","hora_fin":"Nov 17, 2024, 11:48:00 PM","id_plaza":26}]
2024-06-05 19:35:51.356 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:35:51.356 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:51) log ### JSON => {"user_id":12,"nombre":"Laura","apellido":"Jiménez","email":"member643@webmail.net","password":"1234","telefono":"638673821","fecha_registro":"jun 4, 2024","matricula":"6097WDW","username":"LuckyCat774"}
2024-06-05 19:35:51.532 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 19:35:52.163 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 19:35:52.169 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":2},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":6},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 19:35:56.909 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:35) log ### -- Get Plazas from parking information from DB--
2024-06-05 19:35:57.130 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:50) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM plaza WHERE id_parking = 2
2024-06-05 19:36:11.824 INFO  logic.Logic.getUserFromUsername(Logic.java:252) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users WHERE username = 'LuckyCat774'
2024-06-05 19:36:12.520 INFO  servlets.registerReserva.doPost(registerReserva.java:92) log ### Reserva registrada con exito!
2024-06-05 19:36:32.717 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 19:36:33.071 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 19:36:33.071 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":2},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":6},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 19:36:34.821 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:35) log ### -- Get Plazas from parking information from DB--
2024-06-05 19:36:35.012 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:50) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM plaza WHERE id_parking = 2
2024-06-05 19:36:36.787 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 19:36:37.761 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:36:37.778 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:36:38.322 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 19:36:38.327 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":2},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":6},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 19:36:39.254 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:36:39.285 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:36:39.287 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:51) log ### JSON => {"user_id":12,"nombre":"Laura","apellido":"Jiménez","email":"member643@webmail.net","password":"1234","telefono":"638673821","fecha_registro":"jun 4, 2024","matricula":"6097WDW","username":"LuckyCat774"}
2024-06-05 19:36:39.670 INFO  logic.Logic.getReservasFromDB(Logic.java:167) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM reservas
2024-06-05 19:36:39.672 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:72) log ### JSON => [{"reserva_id":40,"user_id":12,"parking_id":2,"fecha_reserva":"nov 17, 2024","hora_inicio":"Nov 17, 2024, 7:26:27 PM","hora_fin":"Nov 17, 2024, 9:28:03 PM","id_plaza":29},{"reserva_id":41,"user_id":12,"parking_id":1,"fecha_reserva":"ago 9, 2024","hora_inicio":"Aug 9, 2024, 3:59:50 AM","hora_fin":"Aug 9, 2024, 4:19:03 AM","id_plaza":10},{"reserva_id":42,"user_id":12,"parking_id":2,"fecha_reserva":"nov 17, 2024","hora_inicio":"Nov 17, 2024, 4:39:40 PM","hora_fin":"Nov 17, 2024, 11:48:00 PM","id_plaza":26},{"reserva_id":43,"user_id":12,"parking_id":2,"fecha_reserva":"jun 5, 2024","hora_inicio":"Jun 5, 2024, 12:36:00 AM","hora_fin":"Jun 5, 2024, 6:49:00 AM","id_plaza":30}]
2024-06-05 19:37:02.291 INFO  servlets.adminLogin.doPost(adminLogin.java:35) log ### --Admin login function --
2024-06-05 19:37:02.623 INFO  logic.Logic.getAdminFromDB(Logic.java:85) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM admin
2024-06-05 19:37:02.641 INFO  servlets.adminLogin.doPost(adminLogin.java:53) log ### Administrador loggeado correctamente admin
2024-06-05 19:37:03.537 INFO  servlets.getUsers.doGet(getUsers.java:30) log ### -- Get Users information from DB--
2024-06-05 19:37:03.884 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:37:03.888 INFO  servlets.getUsers.doGet(getUsers.java:36) log ### JSON Values=> [{"user_id":12,"nombre":"Laura","apellido":"Jiménez","email":"member643@webmail.net","password":"1234","telefono":"638673821","fecha_registro":"jun 4, 2024","matricula":"6097WDW","username":"LuckyCat774"},{"user_id":13,"nombre":"Juan","apellido":"Díaz","email":"service783@test.gov","password":"8uE#1l5*ITyu","telefono":"604548657","fecha_registro":"jun 5, 2024","matricula":"7092LPF","username":"QuickTiger274"},{"user_id":14,"nombre":"Antonio","apellido":"Martínez","email":"member120@ubipark.gov","password":"@oMP8?23epU#","telefono":"673007521","fecha_registro":"jun 5, 2024","matricula":"4310ZJN","username":"LazyCat490"},{"user_id":15,"nombre":"Isabel","apellido":"Gutiérrez","email":"member928@example.edu","password":"L\u003e_F\u003dwMN1P1!","telefono":"681307317","fecha_registro":"jun 5, 2024","matricula":"6837CRQ","username":"BraveCat959"},{"user_id":16,"nombre":"David","apellido":"Muñoz","email":"info740@ubipark.es","password":"_1QdzjCtY9$r","telefono":"786222391","fecha_registro":"jun 5, 2024","matricula":"1819JFH","username":"AngryTiger766"}] 
2024-06-05 19:37:11.978 INFO  servlets.getReservas.doGet(getReservas.java:28) log ### -- Get Reservas information from DB--
2024-06-05 19:37:12.346 INFO  logic.Logic.getReservasFromDB(Logic.java:167) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM reservas
2024-06-05 19:37:12.346 INFO  servlets.getReservas.doGet(getReservas.java:34) log ### JSON Values=> [{"reserva_id":40,"user_id":12,"parking_id":2,"fecha_reserva":"nov 17, 2024","hora_inicio":"Nov 17, 2024, 7:26:27 PM","hora_fin":"Nov 17, 2024, 9:28:03 PM","id_plaza":29},{"reserva_id":41,"user_id":12,"parking_id":1,"fecha_reserva":"ago 9, 2024","hora_inicio":"Aug 9, 2024, 3:59:50 AM","hora_fin":"Aug 9, 2024, 4:19:03 AM","id_plaza":10},{"reserva_id":42,"user_id":12,"parking_id":2,"fecha_reserva":"nov 17, 2024","hora_inicio":"Nov 17, 2024, 4:39:40 PM","hora_fin":"Nov 17, 2024, 11:48:00 PM","id_plaza":26},{"reserva_id":43,"user_id":12,"parking_id":2,"fecha_reserva":"jun 5, 2024","hora_inicio":"Jun 5, 2024, 12:36:00 AM","hora_fin":"Jun 5, 2024, 6:49:00 AM","id_plaza":30}] 
2024-06-05 19:37:20.213 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:27) log ### --Delete Reserva--
2024-06-05 19:37:20.788 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:57) log ### Query Delete => com.mysql.cj.jdbc.ClientPreparedStatement: DELETE FROM reservas WHERE reserva_id = ** NOT SPECIFIED **
2024-06-05 19:37:20.960 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:66) log ### Query Update Plaza => com.mysql.cj.jdbc.ClientPreparedStatement: UPDATE plaza SET ocupado = 0 WHERE id_plaza = ** NOT SPECIFIED **
2024-06-05 19:37:21.127 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:75) log ### Query Update Parking => com.mysql.cj.jdbc.ClientPreparedStatement: UPDATE parkings SET plazas_disponibles = plazas_disponibles + 1 WHERE parking_id = ** NOT SPECIFIED **
2024-06-05 19:37:21.370 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:85) log ### Reserva eliminada con éxito!
2024-06-05 19:37:21.519 INFO  servlets.getReservas.doGet(getReservas.java:28) log ### -- Get Reservas information from DB--
2024-06-05 19:37:21.846 INFO  logic.Logic.getReservasFromDB(Logic.java:167) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM reservas
2024-06-05 19:37:21.851 INFO  servlets.getReservas.doGet(getReservas.java:34) log ### JSON Values=> [{"reserva_id":40,"user_id":12,"parking_id":2,"fecha_reserva":"nov 17, 2024","hora_inicio":"Nov 17, 2024, 7:26:27 PM","hora_fin":"Nov 17, 2024, 9:28:03 PM","id_plaza":29},{"reserva_id":41,"user_id":12,"parking_id":1,"fecha_reserva":"ago 9, 2024","hora_inicio":"Aug 9, 2024, 3:59:50 AM","hora_fin":"Aug 9, 2024, 4:19:03 AM","id_plaza":10},{"reserva_id":42,"user_id":12,"parking_id":2,"fecha_reserva":"nov 17, 2024","hora_inicio":"Nov 17, 2024, 4:39:40 PM","hora_fin":"Nov 17, 2024, 11:48:00 PM","id_plaza":26}] 
2024-06-05 19:46:43.985 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:20) log ### -->Suscribe Topics<--
2024-06-05 19:47:00.216 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 19:47:03.834 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 19:47:03.960 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":2},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":7},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 19:47:11.229 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 19:47:11.590 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 19:47:11.592 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":2},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":7},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 19:47:23.424 INFO  servlets.userLogin.doPost(userLogin.java:30) log ### -- User login function --
2024-06-05 19:47:25.010 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:47:25.023 INFO  servlets.userLogin.doPost(userLogin.java:65) log ### Usuario LuckyCat774 loggeado correctamente
2024-06-05 19:47:25.073 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:47:25.771 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:47:25.973 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:47:26.170 INFO  logic.Logic.getReservasFromDB(Logic.java:167) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM reservas
2024-06-05 19:47:26.177 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:72) log ### JSON => [{"reserva_id":40,"user_id":12,"parking_id":2,"fecha_reserva":"nov 17, 2024","hora_inicio":"Nov 17, 2024, 7:26:27 PM","hora_fin":"Nov 17, 2024, 9:28:03 PM","id_plaza":29},{"reserva_id":41,"user_id":12,"parking_id":1,"fecha_reserva":"ago 9, 2024","hora_inicio":"Aug 9, 2024, 3:59:50 AM","hora_fin":"Aug 9, 2024, 4:19:03 AM","id_plaza":10},{"reserva_id":42,"user_id":12,"parking_id":2,"fecha_reserva":"nov 17, 2024","hora_inicio":"Nov 17, 2024, 4:39:40 PM","hora_fin":"Nov 17, 2024, 11:48:00 PM","id_plaza":26}]
2024-06-05 19:47:27.378 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:47:27.378 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:51) log ### JSON => {"user_id":12,"nombre":"Laura","apellido":"Jiménez","email":"member643@webmail.net","password":"1234","telefono":"638673821","fecha_registro":"jun 4, 2024","matricula":"6097WDW","username":"LuckyCat774"}
2024-06-05 19:47:34.021 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 19:47:34.353 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 19:47:34.357 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":2},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":7},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 19:47:35.658 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:35) log ### -- Get Plazas from parking information from DB--
2024-06-05 19:47:36.369 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:50) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM plaza WHERE id_parking = 2
2024-06-05 19:47:52.070 INFO  logic.Logic.getUserFromUsername(Logic.java:252) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users WHERE username = 'LuckyCat774'
2024-06-05 19:47:53.199 ERROR servlets.registerReserva.doPost(registerReserva.java:132) log ### Error al procesar la solicitud: {} java.sql.SQLSyntaxErrorException: Table 'parking.plazas' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1061) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1009) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeLargeUpdate(ClientPreparedStatement.java:1320) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdate(ClientPreparedStatement.java:994) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at org.apache.tomcat.dbcp.dbcp2.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:137) ~[tomcat-dbcp.jar:10.1.16]
	at org.apache.tomcat.dbcp.dbcp2.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:137) ~[tomcat-dbcp.jar:10.1.16]
	at servlets.registerReserva.doPost(registerReserva.java:85) ~[classes/:?]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[servlet-api.jar:6.0]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[servlet-api.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-websocket.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[catalina.jar:10.1.16]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:673) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[catalina.jar:10.1.16]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340) ~[catalina.jar:10.1.16]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-util.jar:10.1.16]
	at java.lang.Thread.run(Thread.java:1623) ~[?:?]

2024-06-05 19:48:29.866 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 19:48:30.182 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 19:48:30.186 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":2},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":7},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 19:48:31.512 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:35) log ### -- Get Plazas from parking information from DB--
2024-06-05 19:48:31.738 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:50) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM plaza WHERE id_parking = 2
2024-06-05 19:48:43.147 INFO  logic.Logic.getUserFromUsername(Logic.java:252) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users WHERE username = 'LuckyCat774'
2024-06-05 19:48:43.851 ERROR servlets.registerReserva.doPost(registerReserva.java:132) log ### Error al procesar la solicitud: {} java.sql.SQLSyntaxErrorException: Table 'parking.plazas' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1061) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1009) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeLargeUpdate(ClientPreparedStatement.java:1320) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdate(ClientPreparedStatement.java:994) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at org.apache.tomcat.dbcp.dbcp2.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:137) ~[tomcat-dbcp.jar:10.1.16]
	at org.apache.tomcat.dbcp.dbcp2.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:137) ~[tomcat-dbcp.jar:10.1.16]
	at servlets.registerReserva.doPost(registerReserva.java:85) ~[classes/:?]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[servlet-api.jar:6.0]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[servlet-api.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-websocket.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[catalina.jar:10.1.16]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[catalina.jar:10.1.16]
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:673) ~[catalina.jar:10.1.16]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[catalina.jar:10.1.16]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340) ~[catalina.jar:10.1.16]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-coyote.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-util.jar:10.1.16]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-util.jar:10.1.16]
	at java.lang.Thread.run(Thread.java:1623) ~[?:?]

2024-06-05 19:49:41.701 INFO  logic.ProjectInitializer.contextInitialized(ProjectInitializer.java:20) log ### -->Suscribe Topics<--
2024-06-05 19:49:53.129 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 19:49:56.533 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 19:49:56.695 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":2},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":7},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 19:50:04.302 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 19:50:04.846 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 19:50:04.849 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":2},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":7},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 19:50:13.847 INFO  servlets.userLogin.doPost(userLogin.java:30) log ### -- User login function --
2024-06-05 19:50:16.987 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:50:16.993 INFO  servlets.userLogin.doPost(userLogin.java:65) log ### Usuario LuckyCat774 loggeado correctamente
2024-06-05 19:50:17.051 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:50:17.549 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:50:17.763 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:50:17.865 INFO  logic.Logic.getReservasFromDB(Logic.java:167) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM reservas
2024-06-05 19:50:17.871 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:72) log ### JSON => [{"reserva_id":40,"user_id":12,"parking_id":2,"fecha_reserva":"nov 17, 2024","hora_inicio":"Nov 17, 2024, 7:26:27 PM","hora_fin":"Nov 17, 2024, 9:28:03 PM","id_plaza":29},{"reserva_id":41,"user_id":12,"parking_id":1,"fecha_reserva":"ago 9, 2024","hora_inicio":"Aug 9, 2024, 3:59:50 AM","hora_fin":"Aug 9, 2024, 4:19:03 AM","id_plaza":10},{"reserva_id":42,"user_id":12,"parking_id":2,"fecha_reserva":"nov 17, 2024","hora_inicio":"Nov 17, 2024, 4:39:40 PM","hora_fin":"Nov 17, 2024, 11:48:00 PM","id_plaza":26}]
2024-06-05 19:50:19.109 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:50:19.114 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:51) log ### JSON => {"user_id":12,"nombre":"Laura","apellido":"Jiménez","email":"member643@webmail.net","password":"1234","telefono":"638673821","fecha_registro":"jun 4, 2024","matricula":"6097WDW","username":"LuckyCat774"}
2024-06-05 19:50:22.412 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:27) log ### --Delete Reserva--
2024-06-05 19:50:22.747 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:57) log ### Query Delete => com.mysql.cj.jdbc.ClientPreparedStatement: DELETE FROM reservas WHERE reserva_id = ** NOT SPECIFIED **
2024-06-05 19:50:22.856 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:66) log ### Query Update Plaza => com.mysql.cj.jdbc.ClientPreparedStatement: UPDATE plaza SET ocupado = 0 WHERE id_plaza = ** NOT SPECIFIED **
2024-06-05 19:50:22.981 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:75) log ### Query Update Parking => com.mysql.cj.jdbc.ClientPreparedStatement: UPDATE parkings SET plazas_disponibles = plazas_disponibles + 1 WHERE parking_id = ** NOT SPECIFIED **
2024-06-05 19:50:23.188 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:85) log ### Reserva eliminada con éxito!
2024-06-05 19:50:23.353 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:50:23.370 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:50:23.992 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:50:24.649 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:50:24.651 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:51) log ### JSON => {"user_id":12,"nombre":"Laura","apellido":"Jiménez","email":"member643@webmail.net","password":"1234","telefono":"638673821","fecha_registro":"jun 4, 2024","matricula":"6097WDW","username":"LuckyCat774"}
2024-06-05 19:50:24.770 INFO  logic.Logic.getReservasFromDB(Logic.java:167) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM reservas
2024-06-05 19:50:24.773 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:72) log ### JSON => [{"reserva_id":40,"user_id":12,"parking_id":2,"fecha_reserva":"nov 17, 2024","hora_inicio":"Nov 17, 2024, 7:26:27 PM","hora_fin":"Nov 17, 2024, 9:28:03 PM","id_plaza":29},{"reserva_id":41,"user_id":12,"parking_id":1,"fecha_reserva":"ago 9, 2024","hora_inicio":"Aug 9, 2024, 3:59:50 AM","hora_fin":"Aug 9, 2024, 4:19:03 AM","id_plaza":10}]
2024-06-05 19:50:26.944 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:27) log ### --Delete Reserva--
2024-06-05 19:50:27.313 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:57) log ### Query Delete => com.mysql.cj.jdbc.ClientPreparedStatement: DELETE FROM reservas WHERE reserva_id = ** NOT SPECIFIED **
2024-06-05 19:50:27.880 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:66) log ### Query Update Plaza => com.mysql.cj.jdbc.ClientPreparedStatement: UPDATE plaza SET ocupado = 0 WHERE id_plaza = ** NOT SPECIFIED **
2024-06-05 19:50:28.027 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:75) log ### Query Update Parking => com.mysql.cj.jdbc.ClientPreparedStatement: UPDATE parkings SET plazas_disponibles = plazas_disponibles + 1 WHERE parking_id = ** NOT SPECIFIED **
2024-06-05 19:50:28.275 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:85) log ### Reserva eliminada con éxito!
2024-06-05 19:50:28.416 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:50:28.424 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:50:29.674 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:50:29.676 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:51) log ### JSON => {"user_id":12,"nombre":"Laura","apellido":"Jiménez","email":"member643@webmail.net","password":"1234","telefono":"638673821","fecha_registro":"jun 4, 2024","matricula":"6097WDW","username":"LuckyCat774"}
2024-06-05 19:50:29.693 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:50:30.089 INFO  logic.Logic.getReservasFromDB(Logic.java:167) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM reservas
2024-06-05 19:50:30.092 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:72) log ### JSON => [{"reserva_id":40,"user_id":12,"parking_id":2,"fecha_reserva":"nov 17, 2024","hora_inicio":"Nov 17, 2024, 7:26:27 PM","hora_fin":"Nov 17, 2024, 9:28:03 PM","id_plaza":29}]
2024-06-05 19:50:32.023 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:27) log ### --Delete Reserva--
2024-06-05 19:50:33.105 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:57) log ### Query Delete => com.mysql.cj.jdbc.ClientPreparedStatement: DELETE FROM reservas WHERE reserva_id = ** NOT SPECIFIED **
2024-06-05 19:50:33.223 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:66) log ### Query Update Plaza => com.mysql.cj.jdbc.ClientPreparedStatement: UPDATE plaza SET ocupado = 0 WHERE id_plaza = ** NOT SPECIFIED **
2024-06-05 19:50:33.873 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:75) log ### Query Update Parking => com.mysql.cj.jdbc.ClientPreparedStatement: UPDATE parkings SET plazas_disponibles = plazas_disponibles + 1 WHERE parking_id = ** NOT SPECIFIED **
2024-06-05 19:50:34.306 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:85) log ### Reserva eliminada con éxito!
2024-06-05 19:50:34.438 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:50:34.452 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:50:34.842 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:50:34.843 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:51) log ### JSON => {"user_id":12,"nombre":"Laura","apellido":"Jiménez","email":"member643@webmail.net","password":"1234","telefono":"638673821","fecha_registro":"jun 4, 2024","matricula":"6097WDW","username":"LuckyCat774"}
2024-06-05 19:50:34.884 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:50:35.186 INFO  logic.Logic.getReservasFromDB(Logic.java:167) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM reservas
2024-06-05 19:50:35.186 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:72) log ### JSON => []
2024-06-05 19:50:37.093 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 19:50:37.401 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 19:50:37.403 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":9},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 19:50:38.709 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:35) log ### -- Get Plazas from parking information from DB--
2024-06-05 19:50:38.915 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:50) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM plaza WHERE id_parking = 2
2024-06-05 19:50:54.087 INFO  logic.Logic.getUserFromUsername(Logic.java:252) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users WHERE username = 'LuckyCat774'
2024-06-05 19:50:54.867 INFO  servlets.registerReserva.doPost(registerReserva.java:118) log ### Reserva registrada con éxito!
2024-06-05 19:50:59.889 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 19:51:00.362 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 19:51:00.365 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 19:51:02.534 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:35) log ### -- Get Plazas from parking information from DB--
2024-06-05 19:51:02.999 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:50) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM plaza WHERE id_parking = 2
2024-06-05 19:51:04.770 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 19:51:06.617 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:51:06.633 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:51:07.145 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 19:51:07.148 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 19:51:07.921 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:51:08.601 INFO  logic.Logic.getReservasFromDB(Logic.java:167) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM reservas
2024-06-05 19:51:08.604 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:72) log ### JSON => [{"reserva_id":44,"user_id":12,"parking_id":2,"fecha_reserva":"jun 5, 2024","hora_inicio":"Jun 5, 2024, 10:50:00 PM","hora_fin":"Jun 5, 2024, 11:50:00 PM","id_plaza":30}]
2024-06-05 19:51:08.843 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:51:08.848 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:51) log ### JSON => {"user_id":12,"nombre":"Laura","apellido":"Jiménez","email":"member643@webmail.net","password":"1234","telefono":"638673821","fecha_registro":"jun 4, 2024","matricula":"6097WDW","username":"LuckyCat774"}
2024-06-05 19:51:29.744 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 19:51:30.178 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 19:51:30.180 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":8},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 19:51:35.379 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:35) log ### -- Get Plazas from parking information from DB--
2024-06-05 19:51:35.637 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:50) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM plaza WHERE id_parking = 2
2024-06-05 19:51:36.567 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:35) log ### -- Get Plazas from parking information from DB--
2024-06-05 19:51:36.921 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:50) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM plaza WHERE id_parking = 1
2024-06-05 19:51:39.867 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:35) log ### -- Get Plazas from parking information from DB--
2024-06-05 19:51:40.212 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:50) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM plaza WHERE id_parking = 4
2024-06-05 19:52:01.422 INFO  logic.Logic.getUserFromUsername(Logic.java:252) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users WHERE username = 'LuckyCat774'
2024-06-05 19:52:02.706 INFO  servlets.registerReserva.doPost(registerReserva.java:118) log ### Reserva registrada con éxito!
2024-06-05 19:52:06.352 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:52:06.362 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:52:06.725 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:52:07.047 INFO  logic.Logic.getReservasFromDB(Logic.java:167) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM reservas
2024-06-05 19:52:07.049 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:72) log ### JSON => [{"reserva_id":44,"user_id":12,"parking_id":2,"fecha_reserva":"jun 5, 2024","hora_inicio":"Jun 5, 2024, 10:50:00 PM","hora_fin":"Jun 5, 2024, 11:50:00 PM","id_plaza":30},{"reserva_id":45,"user_id":12,"parking_id":4,"fecha_reserva":"jun 5, 2024","hora_inicio":"Jun 5, 2024, 10:52:00 PM","hora_fin":"Jun 5, 2024, 12:55:00 AM","id_plaza":1}]
2024-06-05 19:52:08.962 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:52:08.974 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:51) log ### JSON => {"user_id":12,"nombre":"Laura","apellido":"Jiménez","email":"member643@webmail.net","password":"1234","telefono":"638673821","fecha_registro":"jun 4, 2024","matricula":"6097WDW","username":"LuckyCat774"}
2024-06-05 19:52:14.695 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:27) log ### --Delete Reserva--
2024-06-05 19:52:14.996 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:57) log ### Query Delete => com.mysql.cj.jdbc.ClientPreparedStatement: DELETE FROM reservas WHERE reserva_id = ** NOT SPECIFIED **
2024-06-05 19:52:15.657 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:66) log ### Query Update Plaza => com.mysql.cj.jdbc.ClientPreparedStatement: UPDATE plaza SET ocupado = 0 WHERE id_plaza = ** NOT SPECIFIED **
2024-06-05 19:52:16.197 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:75) log ### Query Update Parking => com.mysql.cj.jdbc.ClientPreparedStatement: UPDATE parkings SET plazas_disponibles = plazas_disponibles + 1 WHERE parking_id = ** NOT SPECIFIED **
2024-06-05 19:52:16.747 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:85) log ### Reserva eliminada con éxito!
2024-06-05 19:52:16.882 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:52:16.891 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:52:17.193 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:52:17.212 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:52:17.212 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:51) log ### JSON => {"user_id":12,"nombre":"Laura","apellido":"Jiménez","email":"member643@webmail.net","password":"1234","telefono":"638673821","fecha_registro":"jun 4, 2024","matricula":"6097WDW","username":"LuckyCat774"}
2024-06-05 19:52:17.487 INFO  logic.Logic.getReservasFromDB(Logic.java:167) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM reservas
2024-06-05 19:52:17.491 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:72) log ### JSON => [{"reserva_id":44,"user_id":12,"parking_id":2,"fecha_reserva":"jun 5, 2024","hora_inicio":"Jun 5, 2024, 10:50:00 PM","hora_fin":"Jun 5, 2024, 11:50:00 PM","id_plaza":30}]
2024-06-05 19:52:19.394 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:27) log ### --Delete Reserva--
2024-06-05 19:52:19.709 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:57) log ### Query Delete => com.mysql.cj.jdbc.ClientPreparedStatement: DELETE FROM reservas WHERE reserva_id = ** NOT SPECIFIED **
2024-06-05 19:52:19.895 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:66) log ### Query Update Plaza => com.mysql.cj.jdbc.ClientPreparedStatement: UPDATE plaza SET ocupado = 0 WHERE id_plaza = ** NOT SPECIFIED **
2024-06-05 19:52:19.995 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:75) log ### Query Update Parking => com.mysql.cj.jdbc.ClientPreparedStatement: UPDATE parkings SET plazas_disponibles = plazas_disponibles + 1 WHERE parking_id = ** NOT SPECIFIED **
2024-06-05 19:52:20.195 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:85) log ### Reserva eliminada con éxito!
2024-06-05 19:52:20.332 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:52:20.341 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:52:20.678 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:52:20.680 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:52:20.683 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:51) log ### JSON => {"user_id":12,"nombre":"Laura","apellido":"Jiménez","email":"member643@webmail.net","password":"1234","telefono":"638673821","fecha_registro":"jun 4, 2024","matricula":"6097WDW","username":"LuckyCat774"}
2024-06-05 19:52:20.970 INFO  logic.Logic.getReservasFromDB(Logic.java:167) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM reservas
2024-06-05 19:52:20.970 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:72) log ### JSON => []
2024-06-05 19:52:26.599 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 19:52:27.253 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 19:52:27.254 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":9},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 19:53:41.874 INFO  servlets.userLogin.doPost(userLogin.java:30) log ### -- User login function --
2024-06-05 19:53:44.709 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:53:44.709 INFO  servlets.userLogin.doPost(userLogin.java:65) log ### Usuario LuckyCat774 loggeado correctamente
2024-06-05 19:53:44.756 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:53:44.773 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:53:45.872 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:53:47.993 INFO  logic.Logic.getReservasFromDB(Logic.java:167) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM reservas
2024-06-05 19:53:47.993 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:72) log ### JSON => []
2024-06-05 19:53:48.134 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:53:48.140 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:51) log ### JSON => {"user_id":12,"nombre":"Laura","apellido":"Jiménez","email":"member643@webmail.net","password":"1234","telefono":"638673821","fecha_registro":"jun 4, 2024","matricula":"6097WDW","username":"LuckyCat774"}
2024-06-05 19:53:51.666 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 19:53:52.939 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 19:53:52.943 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":9},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 19:53:57.729 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:35) log ### -- Get Plazas from parking information from DB--
2024-06-05 19:53:57.944 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:50) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM plaza WHERE id_parking = 2
2024-06-05 19:54:03.152 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:35) log ### -- Get Plazas from parking information from DB--
2024-06-05 19:54:03.373 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:50) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM plaza WHERE id_parking = 1
2024-06-05 19:54:05.472 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:35) log ### -- Get Plazas from parking information from DB--
2024-06-05 19:54:08.645 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:50) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM plaza WHERE id_parking = 4
2024-06-05 19:54:57.004 INFO  logic.Logic.getUserFromUsername(Logic.java:252) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users WHERE username = 'LuckyCat774'
2024-06-05 19:55:01.222 INFO  servlets.registerReserva.doPost(registerReserva.java:118) log ### Reserva registrada con éxito!
2024-06-05 19:55:09.213 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:35) log ### -- Get Plazas from parking information from DB--
2024-06-05 19:55:10.176 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:50) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM plaza WHERE id_parking = 1
2024-06-05 19:55:13.783 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:35) log ### -- Get Plazas from parking information from DB--
2024-06-05 19:55:19.174 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:50) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM plaza WHERE id_parking = 4
2024-06-05 19:55:20.423 INFO  logic.Logic.getUserFromUsername(Logic.java:252) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users WHERE username = 'LuckyCat774'
2024-06-05 19:55:23.286 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:55:23.311 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:55:26.749 INFO  servlets.registerReserva.doPost(registerReserva.java:118) log ### Reserva registrada con éxito!
2024-06-05 19:55:28.289 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:55:29.068 INFO  logic.Logic.getReservasFromDB(Logic.java:167) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM reservas
2024-06-05 19:55:29.076 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:72) log ### JSON => [{"reserva_id":46,"user_id":12,"parking_id":4,"fecha_reserva":"jun 5, 2024","hora_inicio":"Jun 5, 2024, 8:00:00 PM","hora_fin":"Jun 5, 2024, 10:00:00 PM","id_plaza":1},{"reserva_id":47,"user_id":12,"parking_id":4,"fecha_reserva":"jun 5, 2024","hora_inicio":"Jun 5, 2024, 8:00:00 PM","hora_fin":"Jun 5, 2024, 10:00:00 PM","id_plaza":1}]
2024-06-05 19:55:32.099 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:55:32.102 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:51) log ### JSON => {"user_id":12,"nombre":"Laura","apellido":"Jiménez","email":"member643@webmail.net","password":"1234","telefono":"638673821","fecha_registro":"jun 4, 2024","matricula":"6097WDW","username":"LuckyCat774"}
2024-06-05 19:55:38.103 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:27) log ### --Delete Reserva--
2024-06-05 19:55:38.742 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:57) log ### Query Delete => com.mysql.cj.jdbc.ClientPreparedStatement: DELETE FROM reservas WHERE reserva_id = ** NOT SPECIFIED **
2024-06-05 19:55:39.650 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:66) log ### Query Update Plaza => com.mysql.cj.jdbc.ClientPreparedStatement: UPDATE plaza SET ocupado = 0 WHERE id_plaza = ** NOT SPECIFIED **
2024-06-05 19:55:39.754 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:75) log ### Query Update Parking => com.mysql.cj.jdbc.ClientPreparedStatement: UPDATE parkings SET plazas_disponibles = plazas_disponibles + 1 WHERE parking_id = ** NOT SPECIFIED **
2024-06-05 19:55:40.039 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:85) log ### Reserva eliminada con éxito!
2024-06-05 19:55:40.261 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:27) log ### --Delete Reserva--
2024-06-05 19:55:40.302 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:55:40.314 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:55:41.065 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:55:41.065 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:55:41.067 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:51) log ### JSON => {"user_id":12,"nombre":"Laura","apellido":"Jiménez","email":"member643@webmail.net","password":"1234","telefono":"638673821","fecha_registro":"jun 4, 2024","matricula":"6097WDW","username":"LuckyCat774"}
2024-06-05 19:55:41.871 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:57) log ### Query Delete => com.mysql.cj.jdbc.ClientPreparedStatement: DELETE FROM reservas WHERE reserva_id = ** NOT SPECIFIED **
2024-06-05 19:55:41.972 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:66) log ### Query Update Plaza => com.mysql.cj.jdbc.ClientPreparedStatement: UPDATE plaza SET ocupado = 0 WHERE id_plaza = ** NOT SPECIFIED **
2024-06-05 19:55:42.598 INFO  logic.Logic.getReservasFromDB(Logic.java:167) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM reservas
2024-06-05 19:55:42.600 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:72) log ### JSON => [{"reserva_id":46,"user_id":12,"parking_id":4,"fecha_reserva":"jun 5, 2024","hora_inicio":"Jun 5, 2024, 8:00:00 PM","hora_fin":"Jun 5, 2024, 10:00:00 PM","id_plaza":1}]
2024-06-05 19:55:42.776 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:75) log ### Query Update Parking => com.mysql.cj.jdbc.ClientPreparedStatement: UPDATE parkings SET plazas_disponibles = plazas_disponibles + 1 WHERE parking_id = ** NOT SPECIFIED **
2024-06-05 19:55:43.038 INFO  servlets.deleteReserva.doDelete(deleteReserva.java:85) log ### Reserva eliminada con éxito!
2024-06-05 19:55:47.889 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 19:55:48.988 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 19:55:48.996 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":9},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 19:55:57.320 INFO  servlets.userLogin.doPost(userLogin.java:30) log ### -- User login function --
2024-06-05 19:55:58.520 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:55:58.522 INFO  servlets.userLogin.doPost(userLogin.java:65) log ### Usuario LuckyCat774 loggeado correctamente
2024-06-05 19:55:58.552 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:55:58.556 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:56:00.407 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 19:56:00.556 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:56:00.686 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:56:00.687 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:51) log ### JSON => {"user_id":12,"nombre":"Laura","apellido":"Jiménez","email":"member643@webmail.net","password":"1234","telefono":"638673821","fecha_registro":"jun 4, 2024","matricula":"6097WDW","username":"LuckyCat774"}
2024-06-05 19:56:00.891 INFO  logic.Logic.getReservasFromDB(Logic.java:167) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM reservas
2024-06-05 19:56:00.892 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:72) log ### JSON => []
2024-06-05 19:56:02.729 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 19:56:02.729 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":9},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 19:56:07.174 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:35) log ### -- Get Plazas from parking information from DB--
2024-06-05 19:56:07.372 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:50) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM plaza WHERE id_parking = 4
2024-06-05 19:56:10.681 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 19:56:11.252 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 19:56:11.255 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":9},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 19:56:11.918 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:56:11.927 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:56:12.237 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:56:12.254 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:56:12.254 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:51) log ### JSON => {"user_id":12,"nombre":"Laura","apellido":"Jiménez","email":"member643@webmail.net","password":"1234","telefono":"638673821","fecha_registro":"jun 4, 2024","matricula":"6097WDW","username":"LuckyCat774"}
2024-06-05 19:56:12.828 INFO  logic.Logic.getReservasFromDB(Logic.java:167) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM reservas
2024-06-05 19:56:12.828 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:72) log ### JSON => []
2024-06-05 19:56:15.567 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:56:15.572 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:56:16.535 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 19:56:17.354 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:56:19.118 INFO  logic.Logic.getReservasFromDB(Logic.java:167) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM reservas
2024-06-05 19:56:19.119 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:72) log ### JSON => []
2024-06-05 19:56:20.375 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 19:56:20.375 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":9},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":1}] 
2024-06-05 19:56:20.447 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:56:20.447 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:51) log ### JSON => {"user_id":12,"nombre":"Laura","apellido":"Jiménez","email":"member643@webmail.net","password":"1234","telefono":"638673821","fecha_registro":"jun 4, 2024","matricula":"6097WDW","username":"LuckyCat774"}
2024-06-05 19:56:21.765 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:35) log ### -- Get Plazas from parking information from DB--
2024-06-05 19:56:21.954 INFO  servlets.getPlazasFromParking.doGet(getPlazasFromParking.java:50) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM plaza WHERE id_parking = 4
2024-06-05 19:56:38.800 INFO  logic.Logic.getUserFromUsername(Logic.java:252) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users WHERE username = 'LuckyCat774'
2024-06-05 19:56:40.764 INFO  servlets.registerReserva.doPost(registerReserva.java:118) log ### Reserva registrada con éxito!
2024-06-05 19:56:44.193 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 19:56:44.483 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 19:56:44.486 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":9},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":0}] 
2024-06-05 19:56:45.614 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:56:45.623 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:31) log ### -- Get User from username information from DB--
2024-06-05 19:56:47.530 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:56:48.336 INFO  logic.Logic.getReservasFromDB(Logic.java:167) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM reservas
2024-06-05 19:56:48.336 INFO  servlets.getReservasFromUsername.doGet(getReservasFromUsername.java:72) log ### JSON => [{"reserva_id":48,"user_id":12,"parking_id":4,"fecha_reserva":"jun 5, 2024","hora_inicio":"Jun 5, 2024, 8:00:00 PM","hora_fin":"Jun 5, 2024, 12:00:00 AM","id_plaza":1}]
2024-06-05 19:56:52.704 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:56:52.704 INFO  servlets.getUserFromUsername.doGet(getUserFromUsername.java:51) log ### JSON => {"user_id":12,"nombre":"Laura","apellido":"Jiménez","email":"member643@webmail.net","password":"1234","telefono":"638673821","fecha_registro":"jun 4, 2024","matricula":"6097WDW","username":"LuckyCat774"}
2024-06-05 19:57:16.933 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 19:57:17.717 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 19:57:17.717 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":9},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":0}] 
2024-06-05 19:57:26.576 INFO  servlets.userLogin.doPost(userLogin.java:30) log ### -- User login function --
2024-06-05 19:57:26.907 INFO  servlets.userLogin.doPost(userLogin.java:30) log ### -- User login function --
2024-06-05 19:57:31.678 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:57:31.682 INFO  servlets.userLogin.doPost(userLogin.java:65) log ### Usuario LuckyCat774 loggeado correctamente
2024-06-05 19:57:38.693 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:57:38.695 INFO  servlets.userLogin.doPost(userLogin.java:65) log ### Usuario LuckyCat774 loggeado correctamente
2024-06-05 19:57:40.073 INFO  servlets.adminLogin.doPost(adminLogin.java:35) log ### --Admin login function --
2024-06-05 19:57:40.488 INFO  logic.Logic.getAdminFromDB(Logic.java:85) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM admin
2024-06-05 19:57:40.491 INFO  servlets.adminLogin.doPost(adminLogin.java:53) log ### Administrador loggeado correctamente admin
2024-06-05 19:57:47.384 INFO  servlets.getUsers.doGet(getUsers.java:30) log ### -- Get Users information from DB--
2024-06-05 19:57:47.732 INFO  logic.Logic.getUsersFromDB(Logic.java:38) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM users
2024-06-05 19:57:47.735 INFO  servlets.getUsers.doGet(getUsers.java:36) log ### JSON Values=> [{"user_id":12,"nombre":"Laura","apellido":"Jiménez","email":"member643@webmail.net","password":"1234","telefono":"638673821","fecha_registro":"jun 4, 2024","matricula":"6097WDW","username":"LuckyCat774"},{"user_id":13,"nombre":"Juan","apellido":"Díaz","email":"service783@test.gov","password":"8uE#1l5*ITyu","telefono":"604548657","fecha_registro":"jun 5, 2024","matricula":"7092LPF","username":"QuickTiger274"},{"user_id":14,"nombre":"Antonio","apellido":"Martínez","email":"member120@ubipark.gov","password":"@oMP8?23epU#","telefono":"673007521","fecha_registro":"jun 5, 2024","matricula":"4310ZJN","username":"LazyCat490"},{"user_id":15,"nombre":"Isabel","apellido":"Gutiérrez","email":"member928@example.edu","password":"L\u003e_F\u003dwMN1P1!","telefono":"681307317","fecha_registro":"jun 5, 2024","matricula":"6837CRQ","username":"BraveCat959"},{"user_id":16,"nombre":"David","apellido":"Muñoz","email":"info740@ubipark.es","password":"_1QdzjCtY9$r","telefono":"786222391","fecha_registro":"jun 5, 2024","matricula":"1819JFH","username":"AngryTiger766"}] 
2024-06-05 19:57:56.271 INFO  servlets.getReservas.doGet(getReservas.java:28) log ### -- Get Reservas information from DB--
2024-06-05 19:57:57.500 INFO  logic.Logic.getReservasFromDB(Logic.java:167) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM reservas
2024-06-05 19:57:57.502 INFO  servlets.getReservas.doGet(getReservas.java:34) log ### JSON Values=> [{"reserva_id":48,"user_id":12,"parking_id":4,"fecha_reserva":"jun 5, 2024","hora_inicio":"Jun 5, 2024, 8:00:00 PM","hora_fin":"Jun 5, 2024, 12:00:00 AM","id_plaza":1}] 
2024-06-05 19:58:04.539 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 19:58:06.368 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 19:58:06.369 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":9},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":0}] 
2024-06-05 19:58:26.248 INFO  servlets.getReservas.doGet(getReservas.java:28) log ### -- Get Reservas information from DB--
2024-06-05 19:58:28.383 INFO  logic.Logic.getReservasFromDB(Logic.java:167) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM reservas
2024-06-05 19:58:28.383 INFO  servlets.getReservas.doGet(getReservas.java:34) log ### JSON Values=> [{"reserva_id":48,"user_id":12,"parking_id":4,"fecha_reserva":"jun 5, 2024","hora_inicio":"Jun 5, 2024, 8:00:00 PM","hora_fin":"Jun 5, 2024, 12:00:00 AM","id_plaza":1}] 
2024-06-05 19:58:28.383 INFO  servlets.getReservas.doGet(getReservas.java:28) log ### -- Get Reservas information from DB--
2024-06-05 19:58:29.851 INFO  logic.Logic.getReservasFromDB(Logic.java:167) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM reservas
2024-06-05 19:58:29.858 INFO  servlets.getReservas.doGet(getReservas.java:34) log ### JSON Values=> [{"reserva_id":48,"user_id":12,"parking_id":4,"fecha_reserva":"jun 5, 2024","hora_inicio":"Jun 5, 2024, 8:00:00 PM","hora_fin":"Jun 5, 2024, 12:00:00 AM","id_plaza":1}] 
2024-06-05 19:58:52.435 INFO  servlets.getParkings.doGet(getParkings.java:29) log ### -- Get Users information from DB--
2024-06-05 19:58:54.101 INFO  logic.Logic.getParkingsFromDB(Logic.java:122) log ### Query=> com.mysql.cj.jdbc.ClientPreparedStatement: SELECT * FROM parkings
2024-06-05 19:58:54.101 INFO  servlets.getParkings.doGet(getParkings.java:35) log ### JSON Values=> [{"parking_id":1,"nombre":"Parking Plaza Mostenses","direccion":"Pl. de los Mostenses","ciudad":"Madrid","c_postal":"28015","capacidad_total":10,"plazas_disponibles":3},{"parking_id":2,"nombre":"Estación Santa Justa","direccion":"C. Joaquin Morales y Torres","ciudad":"Sevilla","c_postal":"41003","capacidad_total":12,"plazas_disponibles":9},{"parking_id":4,"nombre":"Parking Escuela Politécnica","direccion":"Ctra. Madrid-Barcelona km, 33","ciudad":"Alcalá de Henares","c_postal":"28805","capacidad_total":1,"plazas_disponibles":0}] 